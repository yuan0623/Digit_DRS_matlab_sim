/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 20:28:14 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t322;
  double t376;
  double t401;
  double t274;
  double t475;
  double t478;
  double t484;
  double t496;
  double t503;
  double t406;
  double t415;
  double t420;
  double t436;
  double t459;
  double t506;
  double t232;
  double t548;
  double t553;
  double t626;
  double t629;
  double t620;
  double t623;
  double t624;
  double t649;
  double t648;
  double t460;
  double t525;
  double t528;
  double t545;
  double t555;
  double t561;
  double t569;
  double t574;
  double t575;
  double t583;
  double t608;
  double t625;
  double t632;
  double t634;
  double t635;
  double t637;
  double t639;
  double t641;
  double t644;
  double t662;
  double t663;
  double t669;
  double t675;
  double t760;
  double t767;
  double t683;
  double t701;
  double t712;
  double t714;
  double t715;
  double t717;
  double t719;
  double t720;
  double t721;
  double t735;
  double t736;
  double t743;
  double t744;
  double t746;
  double t763;
  double t764;
  double t773;
  double t774;
  double t778;
  double t792;
  double t796;
  double t797;
  double t799;
  double t800;
  double t803;
  double t819;
  double t820;
  double t823;
  double t826;
  double t827;
  double t829;
  double t882;
  double t888;
  double t889;
  double t891;
  double t892;
  double t904;
  double t905;
  double t906;
  double t911;
  double t912;
  double t875;
  double t878;
  double t879;
  double t893;
  double t913;
  double t917;
  double t918;
  double t920;
  double t925;
  double t926;
  double t927;
  double t931;
  double t932;
  double t933;
  double t934;
  double t938;
  double t939;
  double t947;
  double t955;
  double t976;
  double t980;
  double t982;
  double t964;
  double t967;
  double t968;
  double t937;
  double t956;
  double t959;
  double t986;
  double t989;
  double t1012;
  double t1025;
  double t1037;
  double t1044;
  double t1060;
  double t1068;
  double t1083;
  double t1089;
  double t1116;
  double t1119;
  double t1210;
  double t1154;
  double t765;
  double t779;
  double t787;
  double t789;
  double t798;
  double t804;
  double t805;
  double t813;
  double t824;
  double t833;
  double t835;
  double t836;
  double t839;
  double t844;
  double t845;
  double t849;
  double t856;
  double t859;
  double t860;
  double t864;
  double t866;
  double t871;
  double t960;
  double t973;
  double t987;
  double t988;
  double t997;
  double t1004;
  double t1008;
  double t1009;
  double t1010;
  double t1019;
  double t1020;
  double t1022;
  double t1024;
  double t1026;
  double t1027;
  double t1030;
  double t1031;
  double t1032;
  double t1035;
  double t1036;
  double t1041;
  double t1042;
  double t1048;
  double t1051;
  double t1052;
  double t1053;
  double t1054;
  double t1059;
  double t1062;
  double t1064;
  double t1070;
  double t1071;
  double t1072;
  double t1081;
  double t1086;
  double t1087;
  double t1088;
  double t1101;
  double t1102;
  double t1103;
  double t1106;
  double t1108;
  double t1117;
  double t1118;
  double t1123;
  double t1127;
  double t1128;
  double t1134;
  double t1153;
  double t1158;
  double t1159;
  double t1160;
  double t1170;
  double t1173;
  double t1174;
  double t1175;
  double t1182;
  double t1187;
  double t1190;
  double t1193;
  double t1195;
  double t1196;
  double t1198;
  double t1199;
  double t1137;
  double t1139;
  double t1140;
  double t1141;
  double t1145;
  double t1146;
  double t1147;
  double t1150;
  double t1220;
  double t1221;
  double t1222;
  double t1224;
  double t1227;
  double t1229;
  double t1230;
  double t1231;
  double t1232;
  double t1237;
  double t1238;
  double t1209;
  double t1212;
  double t1213;
  double t1214;
  double t1215;
  double t1216;
  double t1244;
  double t1248;
  double t1249;
  double t1250;
  double t1251;
  double t1258;
  double t854;
  double t861;
  double t873;
  double t874;
  double t1301;
  double t1302;
  double t1303;
  double t1308;
  double t1011;
  double t1034;
  double t1057;
  double t1058;
  double t1314;
  double t1317;
  double t1322;
  double t1324;
  double t1392;
  double t1393;
  double t1394;
  double t1395;
  double t1580;
  double t1082;
  double t1107;
  double t1135;
  double t1136;
  double t1325;
  double t1328;
  double t1335;
  double t1338;
  double t1396;
  double t1400;
  double t1401;
  double t1406;
  double t1523;
  double t1438;
  double t1439;
  double t1443;
  double t1445;
  double t1455;
  double t1459;
  double t1460;
  double t1461;
  double t1471;
  double t1472;
  double t1473;
  double t1474;
  double t1526;
  double t1533;
  double t1491;
  double t1494;
  double t1497;
  double t1498;
  double t1505;
  double t1509;
  double t1511;
  double t1513;
  double t1518;
  double t1519;
  double t1520;
  double t1521;
  double t1535;
  double t1538;
  double t1540;
  double t1541;
  double t1547;
  double t1549;
  double t1550;
  double t1551;
  double t1553;
  double t1563;
  double t1566;
  double t1567;
  double t1581;
  double t1582;
  double t1592;
  double t1600;
  double t1606;
  double t1607;
  double t1609;
  double t1610;
  double t1619;
  double t1152;
  double t1181;
  double t1200;
  double t1201;
  double t1340;
  double t1341;
  double t1347;
  double t1348;
  double t1407;
  double t1408;
  double t1409;
  double t1415;
  double t1573;
  double t1574;
  double t1575;
  double t1662;
  double t1663;
  double t1665;
  double t1218;
  double t1243;
  double t1259;
  double t1261;
  double t1349;
  double t1354;
  double t1362;
  double t1363;
  double t1416;
  double t1418;
  double t1423;
  double t1424;
  double t1621;
  double t1622;
  double t1625;
  double t1675;
  double t1679;
  double t1682;
  double t1771;
  double t1772;
  double t1773;
  double t1266;
  double t1276;
  double t1277;
  double t1278;
  double t1364;
  double t1366;
  double t1367;
  double t1368;
  double t1425;
  double t1426;
  double t1429;
  double t1430;
  double t1634;
  double t1635;
  double t1636;
  double t1697;
  double t1700;
  double t1703;
  double t1785;
  double t1786;
  double t1787;
  double t1837;
  double t1846;
  double t1847;
  t322 = Cos(var1[7]);
  t376 = -1.*t322;
  t401 = 1. + t376;
  t274 = Cos(var1[6]);
  t475 = -0.8656776547239999*t401;
  t478 = 1. + t475;
  t484 = 0.366501*t478;
  t496 = 0.3172717261340007*t401;
  t503 = t484 + t496;
  t406 = -0.134322983001*t401;
  t415 = 1. + t406;
  t420 = -0.930418*t415;
  t436 = -0.12497652119782442*t401;
  t459 = t420 + t436;
  t506 = Sin(var1[6]);
  t232 = Sin(var1[4]);
  t548 = Cos(var1[4]);
  t553 = Sin(var1[5]);
  t626 = 0.930418*t478;
  t629 = t626 + t436;
  t620 = 0.366501*t415;
  t623 = -0.3172717261340007*t401;
  t624 = t620 + t623;
  t649 = Sin(var1[7]);
  t648 = Cos(var1[5]);
  t460 = t274*t459;
  t525 = -1.*t503*t506;
  t528 = t460 + t525;
  t545 = t232*t528;
  t555 = t274*t503;
  t561 = t459*t506;
  t569 = t555 + t561;
  t574 = -1.*t553*t569;
  t575 = 0. + t574;
  t583 = t548*t575;
  t608 = t545 + t583;
  t625 = t274*t624;
  t632 = -1.*t629*t506;
  t634 = t625 + t632;
  t635 = t232*t634;
  t637 = t274*t629;
  t639 = t624*t506;
  t641 = t637 + t639;
  t644 = -1.*t553*t641;
  t662 = 1.000000637725*t648*t649;
  t663 = t644 + t662;
  t669 = t548*t663;
  t675 = t635 + t669;
  t760 = Cos(var1[3]);
  t767 = Sin(var1[3]);
  t683 = 0.366501*t274*t649;
  t701 = -0.930418*t506*t649;
  t712 = t683 + t701;
  t714 = t232*t712;
  t715 = 1.000000637725*t401;
  t717 = -1. + t715;
  t719 = t648*t717;
  t720 = 0.930418*t274*t649;
  t721 = 0.366501*t506*t649;
  t735 = t720 + t721;
  t736 = -1.*t553*t735;
  t743 = t719 + t736;
  t744 = t548*t743;
  t746 = t714 + t744;
  t763 = t648*t569;
  t764 = 0. + t763;
  t773 = t548*t528;
  t774 = -1.*t232*t575;
  t778 = t773 + t774;
  t792 = t648*t641;
  t796 = 1.000000637725*t553*t649;
  t797 = t792 + t796;
  t799 = t548*t634;
  t800 = -1.*t232*t663;
  t803 = t799 + t800;
  t819 = t717*t553;
  t820 = t648*t735;
  t823 = t819 + t820;
  t826 = t548*t712;
  t827 = -1.*t232*t743;
  t829 = t826 + t827;
  t882 = -3.2909349868922137e-7*var1[7];
  t888 = -0.086807*t415;
  t889 = -0.010947430124480524*t401;
  t891 = 3.5285855002654964e-6*t649;
  t892 = t882 + t888 + t889 + t891;
  t904 = 1.296332362046933e-7*var1[7];
  t905 = 0.123104*t478;
  t906 = 0.10837779271560144*t401;
  t911 = 8.957845855771251e-6*t649;
  t912 = t904 + t905 + t906 + t911;
  t875 = -1.*t274;
  t878 = 1. + t875;
  t879 = 0.091*t878;
  t893 = t506*t892;
  t913 = t274*t912;
  t917 = t879 + t893 + t913;
  t918 = -1.*t553*t917;
  t920 = -1.000000637725*t401;
  t925 = 1. + t920;
  t926 = -0.04501*t925;
  t927 = -0.04500040093286238*t401;
  t931 = -0.001944728829900294*t649;
  t932 = t926 + t927 + t931;
  t933 = t648*t932;
  t934 = t918 + t933;
  t938 = 0.091*t506;
  t939 = t274*t892;
  t947 = -1.*t506*t912;
  t955 = t938 + t939 + t947;
  t976 = t648*t917;
  t980 = t553*t932;
  t982 = t976 + t980;
  t964 = t548*t934;
  t967 = t232*t955;
  t968 = t964 + t967;
  t937 = -1.*t232*t934;
  t956 = t548*t955;
  t959 = t937 + t956;
  t986 = t764*t982;
  t989 = -1.*t982*t797;
  t1012 = t982*t797;
  t1025 = -1.*t982*t823;
  t1037 = -1.*t764*t982;
  t1044 = t982*t823;
  t1060 = t528*t955;
  t1068 = -1.*t634*t955;
  t1083 = t634*t955;
  t1089 = -1.*t955*t712;
  t1116 = -1.*t528*t955;
  t1119 = t955*t712;
  t1210 = -1. + t715;
  t1154 = 1.000000637725*t932*t649;
  t765 = t760*t764;
  t779 = -1.*t767*t778;
  t787 = t765 + t779;
  t789 = 0.818753*t608*t787;
  t798 = t760*t797;
  t804 = -1.*t767*t803;
  t805 = t798 + t804;
  t813 = 0.818753*t675*t805;
  t824 = t760*t823;
  t833 = -1.*t767*t829;
  t835 = t824 + t833;
  t836 = 0.818753*t746*t835;
  t839 = t789 + t813 + t836;
  t844 = t767*t764;
  t845 = t760*t778;
  t849 = t844 + t845;
  t856 = t767*t797;
  t859 = t760*t803;
  t860 = t856 + t859;
  t864 = t767*t823;
  t866 = t760*t829;
  t871 = t864 + t866;
  t960 = t778*t959;
  t973 = t608*t968;
  t987 = t960 + t973 + t986;
  t988 = t987*t675;
  t997 = -1.*t968*t675;
  t1004 = -1.*t959*t803;
  t1008 = t989 + t997 + t1004;
  t1009 = t608*t1008;
  t1010 = t988 + t1009;
  t1019 = t968*t675;
  t1020 = t959*t803;
  t1022 = t1012 + t1019 + t1020;
  t1024 = t1022*t746;
  t1026 = -1.*t968*t746;
  t1027 = -1.*t959*t829;
  t1030 = t1025 + t1026 + t1027;
  t1031 = t675*t1030;
  t1032 = t1024 + t1031;
  t1035 = -1.*t778*t959;
  t1036 = -1.*t608*t968;
  t1041 = t1035 + t1036 + t1037;
  t1042 = t1041*t746;
  t1048 = t968*t746;
  t1051 = t959*t829;
  t1052 = t1044 + t1048 + t1051;
  t1053 = t608*t1052;
  t1054 = t1042 + t1053;
  t1059 = t575*t934;
  t1062 = t1059 + t986 + t1060;
  t1064 = t1062*t797;
  t1070 = -1.*t934*t663;
  t1071 = t1068 + t1070 + t989;
  t1072 = t764*t1071;
  t1081 = t1064 + t1072;
  t1086 = t934*t663;
  t1087 = t1083 + t1086 + t1012;
  t1088 = t1087*t823;
  t1101 = -1.*t934*t743;
  t1102 = t1089 + t1025 + t1101;
  t1103 = t797*t1102;
  t1106 = t1088 + t1103;
  t1108 = -1.*t575*t934;
  t1117 = t1108 + t1037 + t1116;
  t1118 = t1117*t823;
  t1123 = t934*t743;
  t1127 = t1119 + t1044 + t1123;
  t1128 = t764*t1127;
  t1134 = t1118 + t1128;
  t1153 = t641*t917;
  t1158 = t1153 + t1083 + t1154;
  t1159 = t712*t1158;
  t1160 = -1.*t717*t932;
  t1170 = -1.*t917*t735;
  t1173 = t1160 + t1089 + t1170;
  t1174 = t634*t1173;
  t1175 = t1159 + t1174;
  t1182 = -1.*t569*t917;
  t1187 = 0. + t1182 + t1116;
  t1190 = t1187*t712;
  t1193 = t717*t932;
  t1195 = t917*t735;
  t1196 = t1193 + t1119 + t1195;
  t1198 = t528*t1196;
  t1199 = t1190 + t1198;
  t1137 = t569*t917;
  t1139 = 0. + t1137 + t1060;
  t1140 = t634*t1139;
  t1141 = -1.*t641*t917;
  t1145 = -1.000000637725*t932*t649;
  t1146 = t1141 + t1068 + t1145;
  t1147 = t528*t1146;
  t1150 = t1140 + t1147;
  t1220 = 0.091*t459;
  t1221 = t624*t892;
  t1222 = t629*t912;
  t1224 = t1221 + t1222 + t1154;
  t1227 = -1.*t1210*t1224;
  t1229 = -1.*t1210*t932;
  t1230 = -0.366501*t892*t649;
  t1231 = -0.930418*t912*t649;
  t1232 = t1229 + t1230 + t1231;
  t1237 = -1.000000637725*t649*t1232;
  t1238 = t1220 + t1227 + t1237;
  t1209 = 0.091*t624;
  t1212 = -1.*t459*t892;
  t1213 = -1.*t503*t912;
  t1214 = 0. + t1212 + t1213;
  t1215 = -1.*t1210*t1214;
  t1216 = 0. + t1209 + t1215;
  t1244 = 0.033351591*t649;
  t1248 = t459*t892;
  t1249 = t503*t912;
  t1250 = 0. + t1248 + t1249;
  t1251 = -1.000000637725*t1250*t649;
  t1258 = 0. + t1244 + t1251;
  t854 = 0.818753*t608*t849;
  t861 = 0.818753*t675*t860;
  t873 = 0.818753*t746*t871;
  t874 = t854 + t861 + t873;
  t1301 = 0.818753*t849*t787;
  t1302 = 0.818753*t860*t805;
  t1303 = 0.818753*t871*t835;
  t1308 = t1301 + t1302 + t1303;
  t1011 = 0.818753*t746*t1010;
  t1034 = 0.818753*t608*t1032;
  t1057 = 0.818753*t675*t1054;
  t1058 = t1011 + t1034 + t1057;
  t1314 = 0.818753*t1010*t835;
  t1317 = 0.818753*t787*t1032;
  t1322 = 0.818753*t805*t1054;
  t1324 = t1314 + t1317 + t1322;
  t1392 = 0.818753*t1010*t871;
  t1393 = 0.818753*t849*t1032;
  t1394 = 0.818753*t860*t1054;
  t1395 = t1392 + t1393 + t1394;
  t1580 = 1. + t920;
  t1082 = 0.818753*t1081*t746;
  t1107 = 0.818753*t608*t1106;
  t1135 = 0.818753*t675*t1134;
  t1136 = t1082 + t1107 + t1135;
  t1325 = 0.818753*t1081*t835;
  t1328 = 0.818753*t787*t1106;
  t1335 = 0.818753*t805*t1134;
  t1338 = t1325 + t1328 + t1335;
  t1396 = 0.818753*t1081*t871;
  t1400 = 0.818753*t849*t1106;
  t1401 = 0.818753*t860*t1134;
  t1406 = t1396 + t1400 + t1401;
  t1523 = 0.818753*t1081*t1010;
  t1438 = 0.000053*t608;
  t1439 = 0.001929*t675;
  t1443 = -1.e-6*t746;
  t1445 = t1438 + t1439 + t1443;
  t1455 = 0.00077*t608;
  t1459 = 0.000053*t675;
  t1460 = 2.e-6*t746;
  t1461 = t1455 + t1459 + t1460;
  t1471 = 2.e-6*t608;
  t1472 = -1.e-6*t675;
  t1473 = 0.001627*t746;
  t1474 = t1471 + t1472 + t1473;
  t1526 = 0.818753*t1106*t1032;
  t1533 = 0.818753*t1134*t1054;
  t1491 = 0.000053*t764;
  t1494 = 0.001929*t797;
  t1497 = -1.e-6*t823;
  t1498 = t1491 + t1494 + t1497;
  t1505 = 0.00077*t764;
  t1509 = 0.000053*t797;
  t1511 = 2.e-6*t823;
  t1513 = t1505 + t1509 + t1511;
  t1518 = 2.e-6*t764;
  t1519 = -1.e-6*t797;
  t1520 = 0.001627*t823;
  t1521 = t1518 + t1519 + t1520;
  t1535 = 0.001929*t634;
  t1538 = 0.000053*t528;
  t1540 = -1.e-6*t712;
  t1541 = t1535 + t1538 + t1540;
  t1547 = 0.000053*t634;
  t1549 = 0.00077*t528;
  t1550 = 2.e-6*t712;
  t1551 = t1547 + t1549 + t1550;
  t1553 = -1.e-6*t634;
  t1563 = 2.e-6*t528;
  t1566 = 0.001627*t712;
  t1567 = t1553 + t1563 + t1566;
  t1581 = 2.e-6*t1580;
  t1582 = -0.000053000033799425*t649;
  t1592 = t1581 + t1582;
  t1600 = -1.e-6*t1580;
  t1606 = -0.0019290012301715247*t649;
  t1607 = t1600 + t1606;
  t1609 = 0.001627*t1580;
  t1610 = 1.0000006377249999e-6*t649;
  t1619 = t1609 + t1610;
  t1152 = 0.818753*t1150*t746;
  t1181 = 0.818753*t608*t1175;
  t1200 = 0.818753*t675*t1199;
  t1201 = t1152 + t1181 + t1200;
  t1340 = 0.818753*t787*t1175;
  t1341 = 0.818753*t805*t1199;
  t1347 = 0.818753*t1150*t835;
  t1348 = t1340 + t1341 + t1347;
  t1407 = 0.818753*t849*t1175;
  t1408 = 0.818753*t860*t1199;
  t1409 = 0.818753*t1150*t871;
  t1415 = t1407 + t1408 + t1409;
  t1573 = 0.818753*t1150*t1010;
  t1574 = 0.818753*t1175*t1032;
  t1575 = 0.818753*t1199*t1054;
  t1662 = 0.818753*t1150*t1081;
  t1663 = 0.818753*t1175*t1106;
  t1665 = 0.818753*t1199*t1134;
  t1218 = 0.818753*t1216*t675;
  t1243 = 0.818753*t608*t1238;
  t1259 = 0.818753*t1258*t746;
  t1261 = t1218 + t1243 + t1259;
  t1349 = 0.818753*t787*t1238;
  t1354 = 0.818753*t1216*t805;
  t1362 = 0.818753*t1258*t835;
  t1363 = t1349 + t1354 + t1362;
  t1416 = 0.818753*t849*t1238;
  t1418 = 0.818753*t1216*t860;
  t1423 = 0.818753*t1258*t871;
  t1424 = t1416 + t1418 + t1423;
  t1621 = 0.818753*t1258*t1010;
  t1622 = 0.818753*t1238*t1032;
  t1625 = 0.818753*t1216*t1054;
  t1675 = 0.818753*t1258*t1081;
  t1679 = 0.818753*t1238*t1106;
  t1682 = 0.818753*t1216*t1134;
  t1771 = 0.818753*t1258*t1150;
  t1772 = 0.818753*t1238*t1175;
  t1773 = 0.818753*t1216*t1199;
  t1266 = 2.895970298628945e-7*t608;
  t1276 = 7.906262964999585e-6*t675;
  t1277 = 0.0015921651620852287*t746;
  t1278 = t1266 + t1276 + t1277;
  t1364 = 2.895970298628945e-7*t787;
  t1366 = 7.906262964999585e-6*t805;
  t1367 = 0.0015921651620852287*t835;
  t1368 = t1364 + t1366 + t1367;
  t1425 = 2.895970298628945e-7*t849;
  t1426 = 7.906262964999585e-6*t860;
  t1429 = 0.0015921651620852287*t871;
  t1430 = t1425 + t1426 + t1429;
  t1634 = 0.0015921651620852287*t1010;
  t1635 = 2.895970298628945e-7*t1032;
  t1636 = 7.906262964999585e-6*t1054;
  t1697 = 0.0015921651620852287*t1081;
  t1700 = 2.895970298628945e-7*t1106;
  t1703 = 7.906262964999585e-6*t1134;
  t1785 = 0.0015921651620852287*t1150;
  t1786 = 2.895970298628945e-7*t1175;
  t1787 = 7.906262964999585e-6*t1199;
  t1837 = 7.906262964999585e-6*t1216;
  t1846 = 0.0015921651620852287*t1258;
  t1847 = 2.895970298628945e-7*t1238;
  p_output1[0]=0.818753*Power(t608,2) + 0.818753*Power(t675,2) + 0.818753*Power(t746,2);
  p_output1[1]=t839;
  p_output1[2]=t874;
  p_output1[3]=t1058;
  p_output1[4]=t1136;
  p_output1[5]=t1201;
  p_output1[6]=t1261;
  p_output1[7]=t1278;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t839;
  p_output1[31]=0.818753*Power(t787,2) + 0.818753*Power(t805,2) + 0.818753*Power(t835,2);
  p_output1[32]=t1308;
  p_output1[33]=t1324;
  p_output1[34]=t1338;
  p_output1[35]=t1348;
  p_output1[36]=t1363;
  p_output1[37]=t1368;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t874;
  p_output1[61]=t1308;
  p_output1[62]=0.818753*Power(t849,2) + 0.818753*Power(t860,2) + 0.818753*Power(t871,2);
  p_output1[63]=t1395;
  p_output1[64]=t1406;
  p_output1[65]=t1415;
  p_output1[66]=t1424;
  p_output1[67]=t1430;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t1058;
  p_output1[91]=t1324;
  p_output1[92]=t1395;
  p_output1[93]=0.818753*Power(t1010,2) + 0.818753*Power(t1032,2) + 0.818753*Power(t1054,2) + t1461*t608 + t1445*t675 + t1474*t746;
  p_output1[94]=t1523 + t1526 + t1533 + t1513*t608 + t1498*t675 + t1521*t746;
  p_output1[95]=t1573 + t1574 + t1575 + t1551*t608 + t1541*t675 + t1567*t746;
  p_output1[96]=t1621 + t1622 + t1625 + t1592*t608 + t1607*t675 + t1619*t746;
  p_output1[97]=t1634 + t1635 + t1636 + 0.0007700004910482499*t608 + 0.000053000033799425*t675 + 2.0000012754499998e-6*t746;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t1136;
  p_output1[121]=t1338;
  p_output1[122]=t1406;
  p_output1[123]=t1523 + t1526 + t1533 + t1461*t764 + t1445*t797 + t1474*t823;
  p_output1[124]=0.818753*Power(t1081,2) + 0.818753*Power(t1106,2) + 0.818753*Power(t1134,2) + t1513*t764 + t1498*t797 + t1521*t823;
  p_output1[125]=t1662 + t1663 + t1665 + t1551*t764 + t1541*t797 + t1567*t823;
  p_output1[126]=t1675 + t1679 + t1682 + t1592*t764 + t1607*t797 + t1619*t823;
  p_output1[127]=t1697 + t1700 + t1703 + 0.0007700004910482499*t764 + 0.000053000033799425*t797 + 2.0000012754499998e-6*t823;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t1201;
  p_output1[151]=t1348;
  p_output1[152]=t1415;
  p_output1[153]=t1573 + t1574 + t1575 + t1461*t528 + t1445*t634 + t1474*t712;
  p_output1[154]=t1662 + t1663 + t1665 + t1513*t528 + t1498*t634 + t1521*t712;
  p_output1[155]=0.818753*Power(t1150,2) + 0.818753*Power(t1175,2) + 0.818753*Power(t1199,2) + t1551*t528 + t1541*t634 + t1567*t712;
  p_output1[156]=t1771 + t1772 + t1773 + t1592*t528 + t1607*t634 + t1619*t712;
  p_output1[157]=t1785 + t1786 + t1787 + 0.0007700004910482499*t528 + 0.000053000033799425*t634 + 2.0000012754499998e-6*t712;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=t1261;
  p_output1[181]=t1363;
  p_output1[182]=t1424;
  p_output1[183]=t1474*t1580 + t1621 + t1622 + t1625 - 1.000000637725*t1445*t649;
  p_output1[184]=t1521*t1580 + t1675 + t1679 + t1682 - 1.000000637725*t1498*t649;
  p_output1[185]=t1567*t1580 + t1771 + t1772 + t1773 - 1.000000637725*t1541*t649;
  p_output1[186]=0.818753*Power(t1216,2) + 0.818753*Power(t1238,2) + 0.818753*Power(t1258,2) + t1580*t1619 - 1.000000637725*t1607*t649;
  p_output1[187]=2.0000012754499998e-6*t1580 + t1837 + t1846 + t1847 - 0.00005300006759887155*t649;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=t1278;
  p_output1[211]=t1368;
  p_output1[212]=t1430;
  p_output1[213]=1.000000637725*t1461 + t1634 + t1635 + t1636;
  p_output1[214]=1.000000637725*t1513 + t1697 + t1700 + t1703;
  p_output1[215]=1.000000637725*t1551 + t1785 + t1786 + t1787;
  p_output1[216]=1.000000637725*t1592 + t1837 + t1846 + t1847;
  p_output1[217]=0.0007730972180754517;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=0;
  p_output1[421]=0;
  p_output1[422]=0;
  p_output1[423]=0;
  p_output1[424]=0;
  p_output1[425]=0;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L3_digit.hh"

namespace SymFunction
{

void Mmat_L3_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
