/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 20:39:01 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t985;
  double t1615;
  double t1679;
  double t883;
  double t2004;
  double t2012;
  double t2015;
  double t2018;
  double t2093;
  double t1707;
  double t1857;
  double t1890;
  double t1904;
  double t1915;
  double t2096;
  double t2418;
  double t2173;
  double t2188;
  double t2394;
  double t2416;
  double t2419;
  double t2422;
  double t2442;
  double t2454;
  double t2455;
  double t2465;
  double t2275;
  double t2479;
  double t2509;
  double t2515;
  double t2527;
  double t2633;
  double t2637;
  double t2674;
  double t2691;
  double t1959;
  double t2148;
  double t2168;
  double t2187;
  double t2197;
  double t2199;
  double t2212;
  double t2322;
  double t2325;
  double t2326;
  double t2348;
  double t2432;
  double t2466;
  double t2476;
  double t2477;
  double t2516;
  double t2528;
  double t2540;
  double t2541;
  double t2545;
  double t2554;
  double t2556;
  double t2564;
  double t2585;
  double t2590;
  double t2780;
  double t2787;
  double t2667;
  double t2692;
  double t2706;
  double t2715;
  double t2718;
  double t2719;
  double t2720;
  double t2733;
  double t2742;
  double t2744;
  double t2749;
  double t2752;
  double t2755;
  double t2764;
  double t2781;
  double t2784;
  double t2793;
  double t2796;
  double t2799;
  double t2818;
  double t2819;
  double t2831;
  double t2837;
  double t2839;
  double t2841;
  double t2859;
  double t2865;
  double t2871;
  double t2880;
  double t2884;
  double t2886;
  double t2949;
  double t2952;
  double t2965;
  double t2967;
  double t2968;
  double t2969;
  double t2978;
  double t2983;
  double t2988;
  double t2990;
  double t2992;
  double t2993;
  double t3009;
  double t3011;
  double t3015;
  double t3017;
  double t2954;
  double t2955;
  double t2979;
  double t2995;
  double t3002;
  double t3027;
  double t3028;
  double t3029;
  double t3031;
  double t3035;
  double t3041;
  double t3042;
  double t3051;
  double t3005;
  double t3018;
  double t3023;
  double t3039;
  double t3054;
  double t3063;
  double t3067;
  double t3073;
  double t3079;
  double t3108;
  double t3114;
  double t3149;
  double t3131;
  double t3024;
  double t3085;
  double t3201;
  double t3220;
  double t3171;
  double t3186;
  double t3241;
  double t3254;
  double t3272;
  double t3263;
  double t2785;
  double t2804;
  double t2805;
  double t2808;
  double t2832;
  double t2851;
  double t2857;
  double t2858;
  double t2875;
  double t2887;
  double t2888;
  double t2895;
  double t2898;
  double t2899;
  double t2903;
  double t2908;
  double t2911;
  double t2914;
  double t2923;
  double t2932;
  double t2933;
  double t2940;
  double t3066;
  double t3080;
  double t3082;
  double t3083;
  double t3090;
  double t3091;
  double t3093;
  double t3098;
  double t3100;
  double t3109;
  double t3111;
  double t3112;
  double t3113;
  double t3116;
  double t3120;
  double t3123;
  double t3126;
  double t3128;
  double t3132;
  double t3135;
  double t3147;
  double t3148;
  double t3158;
  double t3160;
  double t3161;
  double t3162;
  double t3163;
  double t3175;
  double t3181;
  double t3182;
  double t3190;
  double t3192;
  double t3193;
  double t3199;
  double t3202;
  double t3204;
  double t3205;
  double t3221;
  double t3229;
  double t3231;
  double t3236;
  double t3242;
  double t3243;
  double t3251;
  double t3255;
  double t3256;
  double t3258;
  double t3259;
  double t3262;
  double t3265;
  double t3270;
  double t3271;
  double t3275;
  double t3277;
  double t3278;
  double t3280;
  double t3281;
  double t3282;
  double t3284;
  double t3286;
  double t3289;
  double t3295;
  double t3296;
  double t3299;
  double t3300;
  double t3302;
  double t3303;
  double t3305;
  double t3306;
  double t3308;
  double t3309;
  double t3313;
  double t3314;
  double t3315;
  double t3316;
  double t3317;
  double t3318;
  double t3319;
  double t3321;
  double t3322;
  double t3328;
  double t3329;
  double t3331;
  double t3332;
  double t3334;
  double t3335;
  double t3336;
  double t3342;
  double t3345;
  double t3348;
  double t3353;
  double t3354;
  double t3355;
  double t3358;
  double t3360;
  double t3362;
  double t2910;
  double t2926;
  double t2942;
  double t2945;
  double t3384;
  double t3385;
  double t3386;
  double t3387;
  double t3107;
  double t3130;
  double t3168;
  double t3169;
  double t3388;
  double t3389;
  double t3391;
  double t3394;
  double t3440;
  double t3441;
  double t3443;
  double t3444;
  double t3636;
  double t3637;
  double t3642;
  double t3200;
  double t3237;
  double t3260;
  double t3261;
  double t3399;
  double t3400;
  double t3401;
  double t3402;
  double t3448;
  double t3451;
  double t3452;
  double t3453;
  double t3487;
  double t3492;
  double t3493;
  double t3495;
  double t3497;
  double t3498;
  double t3503;
  double t3504;
  double t3511;
  double t3512;
  double t3513;
  double t3514;
  double t3593;
  double t3594;
  double t3598;
  double t3557;
  double t3558;
  double t3559;
  double t3560;
  double t3564;
  double t3566;
  double t3570;
  double t3571;
  double t3574;
  double t3575;
  double t3576;
  double t3585;
  double t3605;
  double t3606;
  double t3608;
  double t3609;
  double t3619;
  double t3620;
  double t3622;
  double t3623;
  double t3611;
  double t3612;
  double t3614;
  double t3615;
  double t3641;
  double t3643;
  double t3644;
  double t3660;
  double t3661;
  double t3662;
  double t3650;
  double t3651;
  double t3652;
  double t3279;
  double t3298;
  double t3311;
  double t3312;
  double t3403;
  double t3405;
  double t3407;
  double t3409;
  double t3455;
  double t3457;
  double t3458;
  double t3459;
  double t3625;
  double t3626;
  double t3627;
  double t3721;
  double t3722;
  double t3726;
  double t3330;
  double t3347;
  double t3363;
  double t3364;
  double t3410;
  double t3411;
  double t3412;
  double t3413;
  double t3467;
  double t3471;
  double t3474;
  double t3475;
  double t3666;
  double t3672;
  double t3675;
  double t3741;
  double t3742;
  double t3743;
  double t3797;
  double t3798;
  double t3803;
  double t3366;
  double t3367;
  double t3369;
  double t3371;
  double t3417;
  double t3420;
  double t3424;
  double t3425;
  double t3477;
  double t3479;
  double t3481;
  double t3484;
  double t3687;
  double t3688;
  double t3689;
  double t3759;
  double t3760;
  double t3762;
  double t3806;
  double t3807;
  double t3808;
  double t3837;
  double t3838;
  double t3839;
  t985 = Cos(var1[15]);
  t1615 = -1.*t985;
  t1679 = 1. + t1615;
  t883 = Cos(var1[14]);
  t2004 = -0.010926102783999999*t1679;
  t2012 = 1. + t2004;
  t2015 = -0.994522*t2012;
  t2018 = -0.010866249592949247*t1679;
  t2093 = t2015 + t2018;
  t1707 = -0.9890740084840001*t1679;
  t1857 = 1. + t1707;
  t1890 = -0.104528*t1857;
  t1904 = -0.10338592795881554*t1679;
  t1915 = t1890 + t1904;
  t2096 = Sin(var1[14]);
  t2418 = Sin(var1[15]);
  t2173 = Sin(var1[4]);
  t2188 = Cos(var1[4]);
  t2394 = 0.703234*t1857;
  t2416 = -0.007683655156165408*t1679;
  t2419 = -0.7032334678540001*t2418;
  t2422 = t2394 + t2416 + t2419;
  t2442 = -0.073913*t2012;
  t2454 = 0.07310496868062215*t1679;
  t2455 = 0.07391248049600001*t2418;
  t2465 = t2442 + t2454 + t2455;
  t2275 = Sin(var1[5]);
  t2479 = Cos(var1[5]);
  t2509 = -1.0000001112680001*t1679;
  t2515 = 1. + t2509;
  t2527 = 0.707107662212*t2418;
  t2633 = -0.07391248049600001*t2418;
  t2637 = t2442 + t2454 + t2633;
  t2674 = 0.7032334678540001*t2418;
  t2691 = t2394 + t2416 + t2674;
  t1959 = t883*t1915;
  t2148 = -1.*t2093*t2096;
  t2168 = t1959 + t2148;
  t2187 = t2168*t2173;
  t2197 = t883*t2093;
  t2199 = t1915*t2096;
  t2212 = t2197 + t2199;
  t2322 = -1.*t2212*t2275;
  t2325 = 0. + t2322;
  t2326 = t2188*t2325;
  t2348 = t2187 + t2326;
  t2432 = t883*t2422;
  t2466 = -1.*t2096*t2465;
  t2476 = t2432 + t2466;
  t2477 = t2476*t2173;
  t2516 = 0.707107*t2515;
  t2528 = t2516 + t2527;
  t2540 = t2479*t2528;
  t2541 = t2096*t2422;
  t2545 = t883*t2465;
  t2554 = t2541 + t2545;
  t2556 = -1.*t2554*t2275;
  t2564 = t2540 + t2556;
  t2585 = t2188*t2564;
  t2590 = t2477 + t2585;
  t2780 = Cos(var1[3]);
  t2787 = Sin(var1[3]);
  t2667 = -1.*t2096*t2637;
  t2692 = t883*t2691;
  t2706 = t2667 + t2692;
  t2715 = t2706*t2173;
  t2718 = -0.707107*t2515;
  t2719 = t2718 + t2527;
  t2720 = t2479*t2719;
  t2733 = t883*t2637;
  t2742 = t2096*t2691;
  t2744 = t2733 + t2742;
  t2749 = -1.*t2744*t2275;
  t2752 = t2720 + t2749;
  t2755 = t2188*t2752;
  t2764 = t2715 + t2755;
  t2781 = t2479*t2212;
  t2784 = 0. + t2781;
  t2793 = t2188*t2168;
  t2796 = -1.*t2173*t2325;
  t2799 = t2793 + t2796;
  t2818 = t2479*t2554;
  t2819 = t2528*t2275;
  t2831 = t2818 + t2819;
  t2837 = t2188*t2476;
  t2839 = -1.*t2173*t2564;
  t2841 = t2837 + t2839;
  t2859 = t2479*t2744;
  t2865 = t2719*t2275;
  t2871 = t2859 + t2865;
  t2880 = t2188*t2706;
  t2884 = -1.*t2173*t2752;
  t2886 = t2880 + t2884;
  t2949 = -1.*t883;
  t2952 = 1. + t2949;
  t2965 = 1.1924972351948546e-8*var1[15];
  t2967 = 0.362964*t1857;
  t2968 = 0.40254463321932016*t1679;
  t2969 = -0.04348798867123255*t2418;
  t2978 = t2965 + t2967 + t2968 + t2969;
  t2983 = 1.1345904784751044e-7*var1[15];
  t2988 = 0.186523*t2012;
  t2990 = -0.002538918186505569*t1679;
  t2992 = 0.0045707510541009595*t2418;
  t2993 = t2983 + t2988 + t2990 + t2992;
  t3009 = -0.012773*t2515;
  t3011 = -0.056500534356700764*t1679;
  t3015 = -0.04378623580366603*t2418;
  t3017 = t3009 + t3011 + t3015;
  t2954 = 0.12*t2952;
  t2955 = -0.4*t2096;
  t2979 = t2096*t2978;
  t2995 = t883*t2993;
  t3002 = t2954 + t2955 + t2979 + t2995;
  t3027 = 0.4*t2952;
  t3028 = 0.12*t2096;
  t3029 = t883*t2978;
  t3031 = -1.*t2096*t2993;
  t3035 = t3027 + t3028 + t3029 + t3031;
  t3041 = t2479*t3017;
  t3042 = -1.*t3002*t2275;
  t3051 = t3041 + t3042;
  t3005 = t2479*t3002;
  t3018 = t3017*t2275;
  t3023 = t3005 + t3018;
  t3039 = t3035*t2173;
  t3054 = t2188*t3051;
  t3063 = t3039 + t3054;
  t3067 = t2188*t3035;
  t3073 = -1.*t2173*t3051;
  t3079 = t3067 + t3073;
  t3108 = t2784*t3023;
  t3114 = -1.*t3023*t2871;
  t3149 = t3023*t2871;
  t3131 = -1.*t3023*t2831;
  t3024 = -1.*t2784*t3023;
  t3085 = t3023*t2831;
  t3201 = t3035*t2706;
  t3220 = -1.*t3035*t2476;
  t3171 = t2168*t3035;
  t3186 = -1.*t3035*t2706;
  t3241 = -1.*t2168*t3035;
  t3254 = t3035*t2476;
  t3272 = -1.*t3017*t2528;
  t3263 = t3017*t2719;
  t2785 = t2780*t2784;
  t2804 = -1.*t2787*t2799;
  t2805 = t2785 + t2804;
  t2808 = 1.440357*t2348*t2805;
  t2832 = t2780*t2831;
  t2851 = -1.*t2787*t2841;
  t2857 = t2832 + t2851;
  t2858 = 1.440357*t2590*t2857;
  t2875 = t2780*t2871;
  t2887 = -1.*t2787*t2886;
  t2888 = t2875 + t2887;
  t2895 = 1.440357*t2764*t2888;
  t2898 = t2808 + t2858 + t2895;
  t2899 = t2784*t2787;
  t2903 = t2780*t2799;
  t2908 = t2899 + t2903;
  t2911 = t2787*t2831;
  t2914 = t2780*t2841;
  t2923 = t2911 + t2914;
  t2932 = t2787*t2871;
  t2933 = t2780*t2886;
  t2940 = t2932 + t2933;
  t3066 = -1.*t2348*t3063;
  t3080 = -1.*t2799*t3079;
  t3082 = t3024 + t3066 + t3080;
  t3083 = t2590*t3082;
  t3090 = t3063*t2590;
  t3091 = t3079*t2841;
  t3093 = t3085 + t3090 + t3091;
  t3098 = t2348*t3093;
  t3100 = t3083 + t3098;
  t3109 = t2348*t3063;
  t3111 = t2799*t3079;
  t3112 = t3108 + t3109 + t3111;
  t3113 = t2764*t3112;
  t3116 = -1.*t3063*t2764;
  t3120 = -1.*t3079*t2886;
  t3123 = t3114 + t3116 + t3120;
  t3126 = t2348*t3123;
  t3128 = t3113 + t3126;
  t3132 = -1.*t3063*t2590;
  t3135 = -1.*t3079*t2841;
  t3147 = t3131 + t3132 + t3135;
  t3148 = t2764*t3147;
  t3158 = t3063*t2764;
  t3160 = t3079*t2886;
  t3161 = t3149 + t3158 + t3160;
  t3162 = t2590*t3161;
  t3163 = t3148 + t3162;
  t3175 = t2325*t3051;
  t3181 = t3171 + t3175 + t3108;
  t3182 = t2871*t3181;
  t3190 = -1.*t3051*t2752;
  t3192 = t3186 + t3190 + t3114;
  t3193 = t2784*t3192;
  t3199 = t3182 + t3193;
  t3202 = t3051*t2752;
  t3204 = t3201 + t3202 + t3149;
  t3205 = t2831*t3204;
  t3221 = -1.*t3051*t2564;
  t3229 = t3220 + t3221 + t3131;
  t3231 = t2871*t3229;
  t3236 = t3205 + t3231;
  t3242 = -1.*t2325*t3051;
  t3243 = t3241 + t3242 + t3024;
  t3251 = t2831*t3243;
  t3255 = t3051*t2564;
  t3256 = t3254 + t3255 + t3085;
  t3258 = t2784*t3256;
  t3259 = t3251 + t3258;
  t3262 = t3002*t2744;
  t3265 = t3201 + t3262 + t3263;
  t3270 = t2476*t3265;
  t3271 = -1.*t3002*t2554;
  t3275 = t3271 + t3220 + t3272;
  t3277 = t2706*t3275;
  t3278 = t3270 + t3277;
  t3280 = t2212*t3002;
  t3281 = 0. + t3280 + t3171;
  t3282 = t3281*t2706;
  t3284 = -1.*t3002*t2744;
  t3286 = -1.*t3017*t2719;
  t3289 = t3186 + t3284 + t3286;
  t3295 = t2168*t3289;
  t3296 = t3282 + t3295;
  t3299 = -1.*t2212*t3002;
  t3300 = 0. + t3299 + t3241;
  t3302 = t3300*t2476;
  t3303 = t3002*t2554;
  t3305 = t3017*t2528;
  t3306 = t3303 + t3254 + t3305;
  t3308 = t2168*t3306;
  t3309 = t3302 + t3308;
  t3313 = 0.12*t1915;
  t3314 = -0.4*t2093;
  t3315 = -1.*t2422*t2978;
  t3316 = -1.*t2993*t2465;
  t3317 = t3315 + t3316 + t3272;
  t3318 = -1.*t3317*t2719;
  t3319 = t2637*t2993;
  t3321 = t2978*t2691;
  t3322 = t3319 + t3321 + t3263;
  t3328 = -1.*t3322*t2528;
  t3329 = t3313 + t3314 + t3318 + t3328;
  t3331 = 0.12*t2422;
  t3332 = -0.4*t2465;
  t3334 = t1915*t2978;
  t3335 = t2093*t2993;
  t3336 = 0. + t3334 + t3335;
  t3342 = -1.*t3336*t2719;
  t3345 = 0. + t3331 + t3332 + t3342;
  t3348 = -0.4*t2637;
  t3353 = 0.12*t2691;
  t3354 = -1.*t1915*t2978;
  t3355 = -1.*t2093*t2993;
  t3358 = 0. + t3354 + t3355;
  t3360 = -1.*t3358*t2528;
  t3362 = 0. + t3348 + t3353 + t3360;
  t2910 = 1.440357*t2348*t2908;
  t2926 = 1.440357*t2590*t2923;
  t2942 = 1.440357*t2764*t2940;
  t2945 = t2910 + t2926 + t2942;
  t3384 = 1.440357*t2908*t2805;
  t3385 = 1.440357*t2923*t2857;
  t3386 = 1.440357*t2940*t2888;
  t3387 = t3384 + t3385 + t3386;
  t3107 = 1.440357*t2764*t3100;
  t3130 = 1.440357*t2590*t3128;
  t3168 = 1.440357*t2348*t3163;
  t3169 = t3107 + t3130 + t3168;
  t3388 = 1.440357*t2888*t3100;
  t3389 = 1.440357*t2857*t3128;
  t3391 = 1.440357*t2805*t3163;
  t3394 = t3388 + t3389 + t3391;
  t3440 = 1.440357*t2940*t3100;
  t3441 = 1.440357*t2923*t3128;
  t3443 = 1.440357*t2908*t3163;
  t3444 = t3440 + t3441 + t3443;
  t3636 = -0.707107662212*t2418;
  t3637 = t2718 + t3636;
  t3642 = t2516 + t3636;
  t3200 = 1.440357*t2590*t3199;
  t3237 = 1.440357*t2348*t3236;
  t3260 = 1.440357*t2764*t3259;
  t3261 = t3200 + t3237 + t3260;
  t3399 = 1.440357*t2857*t3199;
  t3400 = 1.440357*t2805*t3236;
  t3401 = 1.440357*t2888*t3259;
  t3402 = t3399 + t3400 + t3401;
  t3448 = 1.440357*t2923*t3199;
  t3451 = 1.440357*t2908*t3236;
  t3452 = 1.440357*t2940*t3259;
  t3453 = t3448 + t3451 + t3452;
  t3487 = 0.005778*t2348;
  t3492 = -3.e-6*t2590;
  t3493 = -0.002046*t2764;
  t3495 = t3487 + t3492 + t3493;
  t3497 = -3.e-6*t2348;
  t3498 = 0.006761*t2590;
  t3503 = -6.e-6*t2764;
  t3504 = t3497 + t3498 + t3503;
  t3511 = -0.002046*t2348;
  t3512 = -6.e-6*t2590;
  t3513 = 0.002087*t2764;
  t3514 = t3511 + t3512 + t3513;
  t3593 = 1.440357*t3259*t3100;
  t3594 = 1.440357*t3199*t3128;
  t3598 = 1.440357*t3236*t3163;
  t3557 = -0.002046*t2784;
  t3558 = 0.002087*t2871;
  t3559 = -6.e-6*t2831;
  t3560 = t3557 + t3558 + t3559;
  t3564 = 0.005778*t2784;
  t3566 = -0.002046*t2871;
  t3570 = -3.e-6*t2831;
  t3571 = t3564 + t3566 + t3570;
  t3574 = -3.e-6*t2784;
  t3575 = -6.e-6*t2871;
  t3576 = 0.006761*t2831;
  t3585 = t3574 + t3575 + t3576;
  t3605 = 0.005778*t2168;
  t3606 = -3.e-6*t2476;
  t3608 = -0.002046*t2706;
  t3609 = t3605 + t3606 + t3608;
  t3619 = -0.002046*t2168;
  t3620 = -6.e-6*t2476;
  t3622 = 0.002087*t2706;
  t3623 = t3619 + t3620 + t3622;
  t3611 = -3.e-6*t2168;
  t3612 = 0.006761*t2476;
  t3614 = -6.e-6*t2706;
  t3615 = t3611 + t3612 + t3614;
  t3641 = -3.e-6*t3637;
  t3643 = -0.002046*t3642;
  t3644 = t3641 + t3643;
  t3660 = -6.e-6*t3637;
  t3661 = 0.002087*t3642;
  t3662 = t3660 + t3661;
  t3650 = 0.006761*t3637;
  t3651 = -6.e-6*t3642;
  t3652 = t3650 + t3651;
  t3279 = 1.440357*t3278*t2348;
  t3298 = 1.440357*t3296*t2590;
  t3311 = 1.440357*t3309*t2764;
  t3312 = t3279 + t3298 + t3311;
  t3403 = 1.440357*t3278*t2805;
  t3405 = 1.440357*t3296*t2857;
  t3407 = 1.440357*t3309*t2888;
  t3409 = t3403 + t3405 + t3407;
  t3455 = 1.440357*t3278*t2908;
  t3457 = 1.440357*t3296*t2923;
  t3458 = 1.440357*t3309*t2940;
  t3459 = t3455 + t3457 + t3458;
  t3625 = 1.440357*t3309*t3100;
  t3626 = 1.440357*t3296*t3128;
  t3627 = 1.440357*t3278*t3163;
  t3721 = 1.440357*t3296*t3199;
  t3722 = 1.440357*t3278*t3236;
  t3726 = 1.440357*t3309*t3259;
  t3330 = 1.440357*t3329*t2348;
  t3347 = 1.440357*t3345*t2590;
  t3363 = 1.440357*t3362*t2764;
  t3364 = t3330 + t3347 + t3363;
  t3410 = 1.440357*t3329*t2805;
  t3411 = 1.440357*t3345*t2857;
  t3412 = 1.440357*t3362*t2888;
  t3413 = t3410 + t3411 + t3412;
  t3467 = 1.440357*t3329*t2908;
  t3471 = 1.440357*t3345*t2923;
  t3474 = 1.440357*t3362*t2940;
  t3475 = t3467 + t3471 + t3474;
  t3666 = 1.440357*t3362*t3100;
  t3672 = 1.440357*t3345*t3128;
  t3675 = 1.440357*t3329*t3163;
  t3741 = 1.440357*t3345*t3199;
  t3742 = 1.440357*t3329*t3236;
  t3743 = 1.440357*t3362*t3259;
  t3797 = 1.440357*t3296*t3345;
  t3798 = 1.440357*t3309*t3362;
  t3803 = 1.440357*t3278*t3329;
  t3366 = -1.7631698888227975e-7*t2348;
  t3367 = -0.08913126524571312*t2590;
  t3369 = 0.00005937762408158729*t2764;
  t3371 = t3366 + t3367 + t3369;
  t3417 = -1.7631698888227975e-7*t2805;
  t3420 = -0.08913126524571312*t2857;
  t3424 = 0.00005937762408158729*t2888;
  t3425 = t3417 + t3420 + t3424;
  t3477 = -1.7631698888227975e-7*t2908;
  t3479 = -0.08913126524571312*t2923;
  t3481 = 0.00005937762408158729*t2940;
  t3484 = t3477 + t3479 + t3481;
  t3687 = 0.00005937762408158729*t3100;
  t3688 = -0.08913126524571312*t3128;
  t3689 = -1.7631698888227975e-7*t3163;
  t3759 = -0.08913126524571312*t3199;
  t3760 = -1.7631698888227975e-7*t3236;
  t3762 = 0.00005937762408158729*t3259;
  t3806 = -0.08913126524571312*t3296;
  t3807 = -1.7631698888227975e-7*t3278;
  t3808 = 0.00005937762408158729*t3309;
  t3837 = -0.08913126524571312*t3345;
  t3838 = 0.00005937762408158729*t3362;
  t3839 = -1.7631698888227975e-7*t3329;
  p_output1[0]=1.440357*Power(t2348,2) + 1.440357*Power(t2590,2) + 1.440357*Power(t2764,2);
  p_output1[1]=t2898;
  p_output1[2]=t2945;
  p_output1[3]=t3169;
  p_output1[4]=t3261;
  p_output1[5]=t3312;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=t3364;
  p_output1[15]=t3371;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t2898;
  p_output1[31]=1.440357*Power(t2805,2) + 1.440357*Power(t2857,2) + 1.440357*Power(t2888,2);
  p_output1[32]=t3387;
  p_output1[33]=t3394;
  p_output1[34]=t3402;
  p_output1[35]=t3409;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=t3413;
  p_output1[45]=t3425;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t2945;
  p_output1[61]=t3387;
  p_output1[62]=1.440357*Power(t2908,2) + 1.440357*Power(t2923,2) + 1.440357*Power(t2940,2);
  p_output1[63]=t3444;
  p_output1[64]=t3453;
  p_output1[65]=t3459;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=t3475;
  p_output1[75]=t3484;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t3169;
  p_output1[91]=t3394;
  p_output1[92]=t3444;
  p_output1[93]=1.440357*Power(t3100,2) + 1.440357*Power(t3128,2) + 1.440357*Power(t3163,2) + t2348*t3495 + t2590*t3504 + t2764*t3514;
  p_output1[94]=t2764*t3560 + t2348*t3571 + t2590*t3585 + t3593 + t3594 + t3598;
  p_output1[95]=t2348*t3609 + t2590*t3615 + t2764*t3623 + t3625 + t3626 + t3627;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=t2348*t3644 + t2590*t3652 + t2764*t3662 + t3666 + t3672 + t3675;
  p_output1[105]=-0.005777999698247839*t2348 + 2.9968860491339707e-6*t2590 + 0.002045999268242574*t2764 + t3687 + t3688 + t3689;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t3261;
  p_output1[121]=t3402;
  p_output1[122]=t3453;
  p_output1[123]=t2784*t3495 + t2831*t3504 + t2871*t3514 + t3593 + t3594 + t3598;
  p_output1[124]=1.440357*Power(t3199,2) + 1.440357*Power(t3236,2) + 1.440357*Power(t3259,2) + t2871*t3560 + t2784*t3571 + t2831*t3585;
  p_output1[125]=t2784*t3609 + t2831*t3615 + t2871*t3623 + t3721 + t3722 + t3726;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=t2784*t3644 + t2831*t3652 + t2871*t3662 + t3741 + t3742 + t3743;
  p_output1[135]=-0.005777999698247839*t2784 + 2.9968860491339707e-6*t2831 + 0.002045999268242574*t2871 + t3759 + t3760 + t3762;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t3312;
  p_output1[151]=t3409;
  p_output1[152]=t3459;
  p_output1[153]=t2168*t3495 + t2476*t3504 + t2706*t3514 + t3625 + t3626 + t3627;
  p_output1[154]=t2706*t3560 + t2168*t3571 + t2476*t3585 + t3721 + t3722 + t3726;
  p_output1[155]=1.440357*Power(t3278,2) + 1.440357*Power(t3296,2) + 1.440357*Power(t3309,2) + t2168*t3609 + t2476*t3615 + t2706*t3623;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=t2168*t3644 + t2476*t3652 + t2706*t3662 + t3797 + t3798 + t3803;
  p_output1[165]=-0.005777999698247839*t2168 + 2.9968860491339707e-6*t2476 + 0.002045999268242574*t2706 + t3806 + t3807 + t3808;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=t3364;
  p_output1[421]=t3413;
  p_output1[422]=t3475;
  p_output1[423]=t3504*t3637 + t3514*t3642 + t3666 + t3672 + t3675;
  p_output1[424]=t3585*t3637 + t3560*t3642 + t3741 + t3742 + t3743;
  p_output1[425]=t3615*t3637 + t3623*t3642 + t3797 + t3798 + t3803;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=1.440357*Power(t3329,2) + 1.440357*Power(t3345,2) + 1.440357*Power(t3362,2) + t3637*t3652 + t3642*t3662;
  p_output1[435]=2.9968860491339707e-6*t3637 + 0.002045999268242574*t3642 + t3837 + t3838 + t3839;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=t3371;
  p_output1[451]=t3425;
  p_output1[452]=t3484;
  p_output1[453]=-1.0000001112680001*t3495 - 4.610340000044122e-7*t3504 - 4.610340000044122e-7*t3514 + t3687 + t3688 + t3689;
  p_output1[454]=-4.610340000044122e-7*t3560 - 1.0000001112680001*t3571 - 4.610340000044122e-7*t3585 + t3759 + t3760 + t3762;
  p_output1[455]=-1.0000001112680001*t3609 - 4.610340000044122e-7*t3615 - 4.610340000044122e-7*t3623 + t3806 + t3807 + t3808;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=-1.0000001112680001*t3644 - 4.610340000044122e-7*t3652 - 4.610340000044122e-7*t3662 + t3837 + t3838 + t3839;
  p_output1[465]=0.011293566696850728;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L11_digit.hh"

namespace SymFunction
{

void Mmat_L11_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
