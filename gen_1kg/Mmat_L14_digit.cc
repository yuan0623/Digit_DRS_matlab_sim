/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 20:39:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t276;
  double t2715;
  double t2755;
  double t2837;
  double t2857;
  double t2865;
  double t2785;
  double t2875;
  double t2527;
  double t2718;
  double t2780;
  double t2781;
  double t2819;
  double t2888;
  double t2895;
  double t3029;
  double t3027;
  double t2923;
  double t2926;
  double t2933;
  double t2968;
  double t2969;
  double t2979;
  double t3100;
  double t3123;
  double t3126;
  double t3175;
  double t3181;
  double t3199;
  double t3308;
  double t3312;
  double t3321;
  double t3329;
  double t3330;
  double t3331;
  double t3353;
  double t3362;
  double t3367;
  double t3373;
  double t3374;
  double t3376;
  double t3332;
  double t3335;
  double t3347;
  double t3372;
  double t3381;
  double t3383;
  double t3389;
  double t3391;
  double t3394;
  double t3405;
  double t3457;
  double t3484;
  double t3426;
  double t3438;
  double t3650;
  double t3642;
  double t3028;
  double t3049;
  double t3090;
  double t3093;
  double t3098;
  double t3142;
  double t3147;
  double t3148;
  double t3169;
  double t3200;
  double t3205;
  double t3229;
  double t3231;
  double t3255;
  double t3256;
  double t3258;
  double t3261;
  double t3263;
  double t3266;
  double t3279;
  double t3281;
  double t3295;
  double t3348;
  double t3387;
  double t3399;
  double t3401;
  double t3403;
  double t3407;
  double t3409;
  double t3411;
  double t3412;
  double t3413;
  double t3427;
  double t3429;
  double t3433;
  double t3436;
  double t3439;
  double t3440;
  double t3443;
  double t3451;
  double t3453;
  double t3458;
  double t3477;
  double t3479;
  double t3481;
  double t3495;
  double t3496;
  double t3497;
  double t3514;
  double t3525;
  double t3545;
  double t3548;
  double t3560;
  double t3561;
  double t3566;
  double t3571;
  double t3593;
  double t3594;
  double t3598;
  double t3610;
  double t3611;
  double t3618;
  double t3619;
  double t3620;
  double t3622;
  double t3624;
  double t3625;
  double t3643;
  double t3644;
  double t3647;
  double t3655;
  double t3660;
  double t3661;
  double t3662;
  double t3678;
  double t3679;
  double t3680;
  double t3681;
  double t3689;
  double t3692;
  double t3693;
  double t3259;
  double t3270;
  double t3305;
  double t3306;
  double t3727;
  double t3728;
  double t3729;
  double t3742;
  double t3424;
  double t3455;
  double t3538;
  double t3541;
  double t3743;
  double t3753;
  double t3757;
  double t3758;
  double t3815;
  double t3820;
  double t3824;
  double t3825;
  double t3857;
  double t3860;
  double t3861;
  double t3604;
  double t3641;
  double t3672;
  double t3675;
  double t3759;
  double t3772;
  double t3776;
  double t3777;
  double t3826;
  double t3829;
  double t3833;
  double t3834;
  double t3848;
  double t3852;
  double t3853;
  double t3854;
  double t3878;
  double t3889;
  double t3891;
  double t3894;
  double t3901;
  double t3962;
  double t3963;
  double t3964;
  double t3955;
  double t3956;
  double t3958;
  double t3959;
  double t3936;
  double t3937;
  double t3940;
  double t3941;
  double t3921;
  double t3922;
  double t3925;
  double t3926;
  double t3981;
  double t3982;
  double t3983;
  double t3985;
  double t3986;
  double t3987;
  double t3966;
  double t3969;
  double t3970;
  double t3696;
  double t3697;
  double t3700;
  double t3703;
  double t3778;
  double t3782;
  double t3784;
  double t3791;
  double t3835;
  double t3836;
  double t3837;
  double t3838;
  double t3991;
  double t3993;
  double t3995;
  double t4030;
  double t4032;
  double t4033;
  double t3704;
  double t3705;
  double t3708;
  double t3794;
  double t3803;
  double t3804;
  double t3839;
  double t3841;
  double t3843;
  double t4000;
  double t4001;
  double t4002;
  double t4035;
  double t4043;
  double t4044;
  double t4077;
  double t4078;
  double t4087;
  t276 = Cos(var1[4]);
  t2715 = Cos(var1[18]);
  t2755 = Sin(var1[18]);
  t2837 = 0.930418*t2715;
  t2857 = -0.366501*t2755;
  t2865 = t2837 + t2857;
  t2785 = Sin(var1[4]);
  t2875 = Sin(var1[5]);
  t2527 = Cos(var1[5]);
  t2718 = -0.366501*t2715;
  t2780 = -0.930418*t2755;
  t2781 = t2718 + t2780;
  t2819 = t2781*t2785;
  t2888 = -1.*t276*t2865*t2875;
  t2895 = t2819 + t2888;
  t3029 = Cos(var1[3]);
  t3027 = Sin(var1[3]);
  t2923 = t2865*t2785;
  t2926 = 0.366501*t2715;
  t2933 = 0.930418*t2755;
  t2968 = t2926 + t2933;
  t2969 = -1.*t276*t2968*t2875;
  t2979 = t2923 + t2969;
  t3100 = t276*t2781;
  t3123 = t2865*t2785*t2875;
  t3126 = t3100 + t3123;
  t3175 = t276*t2865;
  t3181 = t2968*t2785*t2875;
  t3199 = t3175 + t3181;
  t3308 = -1.*t2715;
  t3312 = 1. + t3308;
  t3321 = -0.091*t3312;
  t3329 = -0.091948*t2715;
  t3330 = -0.001741*t2755;
  t3331 = t3321 + t3329 + t3330;
  t3353 = -0.001741*t2715;
  t3362 = 0.0009480000000000044*t2755;
  t3367 = t3353 + t3362;
  t3373 = -0.032435*t2527;
  t3374 = -1.*t3331*t2875;
  t3376 = t3373 + t3374;
  t3332 = t2527*t3331;
  t3335 = -0.032435*t2875;
  t3347 = t3332 + t3335;
  t3372 = t3367*t2785;
  t3381 = t276*t3376;
  t3383 = t3372 + t3381;
  t3389 = t276*t3367;
  t3391 = -1.*t2785*t3376;
  t3394 = t3389 + t3391;
  t3405 = -1.*t2527*t2865*t3347;
  t3457 = t3347*t2875;
  t3484 = t2527*t2968*t3347;
  t3426 = t2527*t2865*t3347;
  t3438 = -1.*t2527*t2968*t3347;
  t3650 = -1.*t2865*t3367;
  t3642 = t2781*t3367;
  t3028 = -1.*t2527*t3027*t2785;
  t3049 = -1.*t3029*t2875;
  t3090 = t3028 + t3049;
  t3093 = -0.915088*t276*t2527*t3090;
  t3098 = t3029*t2527*t2865;
  t3142 = -1.*t3027*t3126;
  t3147 = t3098 + t3142;
  t3148 = 0.915088*t2895*t3147;
  t3169 = t3029*t2527*t2968;
  t3200 = -1.*t3027*t3199;
  t3205 = t3169 + t3200;
  t3229 = 0.915088*t2979*t3205;
  t3231 = t3093 + t3148 + t3229;
  t3255 = t3029*t2527*t2785;
  t3256 = -1.*t3027*t2875;
  t3258 = t3255 + t3256;
  t3261 = t2527*t2865*t3027;
  t3263 = t3029*t3126;
  t3266 = t3261 + t3263;
  t3279 = t2527*t2968*t3027;
  t3281 = t3029*t3199;
  t3295 = t3279 + t3281;
  t3348 = -1.*t3347*t2875;
  t3387 = -1.*t276*t2527*t3383;
  t3399 = t2527*t2785*t3394;
  t3401 = t3348 + t3387 + t3399;
  t3403 = t2895*t3401;
  t3407 = -1.*t2895*t3383;
  t3409 = -1.*t3126*t3394;
  t3411 = t3405 + t3407 + t3409;
  t3412 = -1.*t276*t2527*t3411;
  t3413 = t3403 + t3412;
  t3427 = t2895*t3383;
  t3429 = t3126*t3394;
  t3433 = t3426 + t3427 + t3429;
  t3436 = t2979*t3433;
  t3439 = -1.*t2979*t3383;
  t3440 = -1.*t3199*t3394;
  t3443 = t3438 + t3439 + t3440;
  t3451 = t2895*t3443;
  t3453 = t3436 + t3451;
  t3458 = t276*t2527*t3383;
  t3477 = -1.*t2527*t2785*t3394;
  t3479 = t3457 + t3458 + t3477;
  t3481 = t2979*t3479;
  t3495 = t2979*t3383;
  t3496 = t3199*t3394;
  t3497 = t3484 + t3495 + t3496;
  t3514 = -1.*t276*t2527*t3497;
  t3525 = t3481 + t3514;
  t3545 = -1.*t3347*t2875;
  t3548 = -1.*t2527*t3376;
  t3560 = t3545 + t3548;
  t3561 = t2527*t2865*t3560;
  t3566 = -1.*t2781*t3367;
  t3571 = t2865*t2875*t3376;
  t3593 = t3566 + t3405 + t3571;
  t3594 = -1.*t2875*t3593;
  t3598 = t3561 + t3594;
  t3610 = t2527*t3376;
  t3611 = t3457 + t3610;
  t3618 = t2527*t2968*t3611;
  t3619 = t2865*t3367;
  t3620 = -1.*t2968*t2875*t3376;
  t3622 = t3619 + t3484 + t3620;
  t3624 = -1.*t2875*t3622;
  t3625 = t3618 + t3624;
  t3643 = -1.*t2865*t2875*t3376;
  t3644 = t3642 + t3426 + t3643;
  t3647 = t2527*t2968*t3644;
  t3655 = t2968*t2875*t3376;
  t3660 = t3650 + t3438 + t3655;
  t3661 = t2527*t2865*t3660;
  t3662 = t3647 + t3661;
  t3678 = -1.*t3331*t2968;
  t3679 = t3650 + t3678;
  t3680 = t3679*t2781;
  t3681 = t2865*t3331;
  t3689 = t3681 + t3642;
  t3692 = t3689*t2865;
  t3693 = t3680 + t3692;
  t3259 = -0.915088*t276*t2527*t3258;
  t3270 = 0.915088*t2895*t3266;
  t3305 = 0.915088*t2979*t3295;
  t3306 = t3259 + t3270 + t3305;
  t3727 = 0.915088*t3090*t3258;
  t3728 = 0.915088*t3266*t3147;
  t3729 = 0.915088*t3295*t3205;
  t3742 = t3727 + t3728 + t3729;
  t3424 = 0.915088*t2979*t3413;
  t3455 = -0.915088*t276*t2527*t3453;
  t3538 = 0.915088*t2895*t3525;
  t3541 = t3424 + t3455 + t3538;
  t3743 = 0.915088*t3205*t3413;
  t3753 = 0.915088*t3090*t3453;
  t3757 = 0.915088*t3147*t3525;
  t3758 = t3743 + t3753 + t3757;
  t3815 = 0.915088*t3295*t3413;
  t3820 = 0.915088*t3258*t3453;
  t3824 = 0.915088*t3266*t3525;
  t3825 = t3815 + t3820 + t3824;
  t3857 = -0.000766*t276*t2527;
  t3860 = 4.e-6*t2895;
  t3861 = 0.000013*t2979;
  t3604 = 0.915088*t2979*t3598;
  t3641 = 0.915088*t2895*t3625;
  t3672 = -0.915088*t276*t2527*t3662;
  t3675 = t3604 + t3641 + t3672;
  t3759 = 0.915088*t3205*t3598;
  t3772 = 0.915088*t3147*t3625;
  t3776 = 0.915088*t3090*t3662;
  t3777 = t3759 + t3772 + t3776;
  t3826 = 0.915088*t3295*t3598;
  t3829 = 0.915088*t3266*t3625;
  t3833 = 0.915088*t3258*t3662;
  t3834 = t3826 + t3829 + t3833;
  t3848 = -4.e-6*t276*t2527;
  t3852 = 0.001148*t2895;
  t3853 = 3.e-6*t2979;
  t3854 = t3848 + t3852 + t3853;
  t3878 = t3857 + t3860 + t3861;
  t3889 = -0.000013*t276*t2527;
  t3891 = 3.e-6*t2895;
  t3894 = 0.001017*t2979;
  t3901 = t3889 + t3891 + t3894;
  t3962 = 0.915088*t3598*t3413;
  t3963 = 0.915088*t3662*t3453;
  t3964 = 0.915088*t3625*t3525;
  t3955 = 3.e-6*t2527*t2865;
  t3956 = 0.001017*t2527*t2968;
  t3958 = -0.000013*t2875;
  t3959 = t3955 + t3956 + t3958;
  t3936 = 0.001148*t2527*t2865;
  t3937 = 3.e-6*t2527*t2968;
  t3940 = -4.e-6*t2875;
  t3941 = t3936 + t3937 + t3940;
  t3921 = 4.e-6*t2527*t2865;
  t3922 = 0.000013*t2527*t2968;
  t3925 = -0.000766*t2875;
  t3926 = t3921 + t3922 + t3925;
  t3981 = 0.001148*t2781;
  t3982 = 3.e-6*t2865;
  t3983 = t3981 + t3982;
  t3985 = 3.e-6*t2781;
  t3986 = 0.001017*t2865;
  t3987 = t3985 + t3986;
  t3966 = 4.e-6*t2781;
  t3969 = 0.000013*t2865;
  t3970 = t3966 + t3969;
  t3696 = -0.915088*t276*t2527*t3693;
  t3697 = -0.02968087928*t2865*t2895;
  t3700 = 0.02968087928*t2781*t2979;
  t3703 = t3696 + t3697 + t3700;
  t3778 = 0.915088*t3693*t3090;
  t3782 = -0.02968087928*t2865*t3147;
  t3784 = 0.02968087928*t2781*t3205;
  t3791 = t3778 + t3782 + t3784;
  t3835 = 0.915088*t3693*t3258;
  t3836 = -0.02968087928*t2865*t3266;
  t3837 = 0.02968087928*t2781*t3295;
  t3838 = t3835 + t3836 + t3837;
  t3991 = 0.02968087928*t2781*t3413;
  t3993 = 0.915088*t3693*t3453;
  t3995 = -0.02968087928*t2865*t3525;
  t4030 = 0.02968087928*t2781*t3598;
  t4032 = -0.02968087928*t2865*t3625;
  t4033 = 0.915088*t3693*t3662;
  t3704 = -0.0018002532501503663*t2895;
  t3705 = 0.00022324305935101784*t2979;
  t3708 = t3704 + t3705;
  t3794 = -0.0018002532501503663*t3147;
  t3803 = 0.00022324305935101784*t3205;
  t3804 = t3794 + t3803;
  t3839 = -0.0018002532501503663*t3266;
  t3841 = 0.00022324305935101784*t3295;
  t3843 = t3839 + t3841;
  t4000 = 0.00022324305935101784*t3413;
  t4001 = -0.0018002532501503663*t3525;
  t4002 = t3857 + t3860 + t3861 + t4000 + t4001;
  t4035 = 0.00022324305935101784*t3598;
  t4043 = -0.0018002532501503663*t3625;
  t4044 = t3921 + t3922 + t3925 + t4035 + t4043;
  t4077 = 0.000011240888630050262*t2781;
  t4078 = 0.00007139121416862712*t2865;
  t4087 = t4077 + t4078;
  p_output1[0]=0.915088*Power(t2527,2)*Power(t276,2) + 0.915088*Power(t2895,2) + 0.915088*Power(t2979,2);
  p_output1[1]=t3231;
  p_output1[2]=t3306;
  p_output1[3]=t3541;
  p_output1[4]=t3675;
  p_output1[5]=t3703;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=t3708;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t3231;
  p_output1[31]=0.915088*Power(t3090,2) + 0.915088*Power(t3147,2) + 0.915088*Power(t3205,2);
  p_output1[32]=t3742;
  p_output1[33]=t3758;
  p_output1[34]=t3777;
  p_output1[35]=t3791;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=t3804;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t3306;
  p_output1[61]=t3742;
  p_output1[62]=0.915088*Power(t3258,2) + 0.915088*Power(t3266,2) + 0.915088*Power(t3295,2);
  p_output1[63]=t3825;
  p_output1[64]=t3834;
  p_output1[65]=t3838;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=t3843;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t3541;
  p_output1[91]=t3758;
  p_output1[92]=t3825;
  p_output1[93]=0.915088*Power(t3413,2) + 0.915088*Power(t3453,2) + 0.915088*Power(t3525,2) + t2895*t3854 - 1.*t2527*t276*t3878 + t2979*t3901;
  p_output1[94]=-1.*t2527*t276*t3926 + t2895*t3941 + t2979*t3959 + t3962 + t3963 + t3964;
  p_output1[95]=-1.*t2527*t276*t3970 + t2895*t3983 + t2979*t3987 + t3991 + t3993 + t3995;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=t4002;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t3675;
  p_output1[121]=t3777;
  p_output1[122]=t3834;
  p_output1[123]=t2527*t2865*t3854 - 1.*t2875*t3878 + t2527*t2968*t3901 + t3962 + t3963 + t3964;
  p_output1[124]=0.915088*Power(t3598,2) + 0.915088*Power(t3625,2) + 0.915088*Power(t3662,2) - 1.*t2875*t3926 + t2527*t2865*t3941 + t2527*t2968*t3959;
  p_output1[125]=-1.*t2875*t3970 + t2527*t2865*t3983 + t2527*t2968*t3987 + t4030 + t4032 + t4033;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=t4044;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t3703;
  p_output1[151]=t3791;
  p_output1[152]=t3838;
  p_output1[153]=t2781*t3854 + t2865*t3901 + t3991 + t3993 + t3995;
  p_output1[154]=t2781*t3941 + t2865*t3959 + t4030 + t4032 + t4033;
  p_output1[155]=0.0009626993194468*Power(t2781,2) + 0.0009626993194468*Power(t2865,2) + 0.915088*Power(t3693,2) + t2781*t3983 + t2865*t3987;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=t4087;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=0;
  p_output1[421]=0;
  p_output1[422]=0;
  p_output1[423]=0;
  p_output1[424]=0;
  p_output1[425]=0;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=t3708;
  p_output1[541]=t3804;
  p_output1[542]=t3843;
  p_output1[543]=t4002;
  p_output1[544]=t4044;
  p_output1[545]=t4087;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0.0007695961013894023;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L14_digit.hh"

namespace SymFunction
{

void Mmat_L14_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
