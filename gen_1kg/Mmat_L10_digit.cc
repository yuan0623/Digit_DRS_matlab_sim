/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 20:38:59 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t50;
  double t1653;
  double t1707;
  double t1904;
  double t1915;
  double t1920;
  double t1874;
  double t1921;
  double t983;
  double t1679;
  double t1857;
  double t1859;
  double t1890;
  double t1927;
  double t1930;
  double t2168;
  double t2159;
  double t2012;
  double t2015;
  double t2018;
  double t2021;
  double t2028;
  double t2040;
  double t2199;
  double t2212;
  double t2256;
  double t2326;
  double t2348;
  double t2352;
  double t2490;
  double t2494;
  double t2509;
  double t2515;
  double t2516;
  double t2522;
  double t2541;
  double t2545;
  double t2554;
  double t2555;
  double t2564;
  double t2565;
  double t2574;
  double t2527;
  double t2528;
  double t2537;
  double t2556;
  double t2585;
  double t2586;
  double t2608;
  double t2610;
  double t2612;
  double t2640;
  double t2752;
  double t2771;
  double t2706;
  double t2721;
  double t2873;
  double t2859;
  double t2166;
  double t2173;
  double t2187;
  double t2188;
  double t2197;
  double t2268;
  double t2275;
  double t2322;
  double t2325;
  double t2373;
  double t2384;
  double t2390;
  double t2394;
  double t2416;
  double t2418;
  double t2419;
  double t2432;
  double t2442;
  double t2454;
  double t2465;
  double t2466;
  double t2476;
  double t2540;
  double t2590;
  double t2630;
  double t2633;
  double t2637;
  double t2648;
  double t2649;
  double t2667;
  double t2674;
  double t2691;
  double t2715;
  double t2718;
  double t2719;
  double t2720;
  double t2727;
  double t2730;
  double t2733;
  double t2742;
  double t2744;
  double t2755;
  double t2761;
  double t2764;
  double t2768;
  double t2776;
  double t2780;
  double t2781;
  double t2784;
  double t2785;
  double t2794;
  double t2795;
  double t2796;
  double t2799;
  double t2800;
  double t2804;
  double t2805;
  double t2808;
  double t2818;
  double t2831;
  double t2832;
  double t2837;
  double t2839;
  double t2840;
  double t2841;
  double t2851;
  double t2857;
  double t2860;
  double t2865;
  double t2871;
  double t2875;
  double t2880;
  double t2884;
  double t2886;
  double t2894;
  double t2895;
  double t2898;
  double t2899;
  double t2903;
  double t2908;
  double t2910;
  double t2422;
  double t2455;
  double t2477;
  double t2479;
  double t2967;
  double t2968;
  double t2969;
  double t2978;
  double t2692;
  double t2749;
  double t2787;
  double t2793;
  double t2979;
  double t2983;
  double t2988;
  double t2990;
  double t3041;
  double t3042;
  double t3051;
  double t3054;
  double t3093;
  double t3098;
  double t3100;
  double t2819;
  double t2858;
  double t2887;
  double t2888;
  double t2992;
  double t2993;
  double t2995;
  double t3002;
  double t3063;
  double t3066;
  double t3067;
  double t3073;
  double t3107;
  double t3109;
  double t3111;
  double t3112;
  double t3113;
  double t3116;
  double t3120;
  double t3123;
  double t3126;
  double t3199;
  double t3200;
  double t3201;
  double t3168;
  double t3169;
  double t3171;
  double t3175;
  double t3182;
  double t3186;
  double t3190;
  double t3192;
  double t3158;
  double t3160;
  double t3161;
  double t3162;
  double t3229;
  double t3231;
  double t3236;
  double t3241;
  double t3242;
  double t3243;
  double t3204;
  double t3205;
  double t3220;
  double t2911;
  double t2914;
  double t2923;
  double t2926;
  double t3005;
  double t3009;
  double t3011;
  double t3015;
  double t3079;
  double t3080;
  double t3082;
  double t3083;
  double t3254;
  double t3255;
  double t3256;
  double t3296;
  double t3298;
  double t3299;
  double t2932;
  double t2933;
  double t2940;
  double t3017;
  double t3018;
  double t3023;
  double t3085;
  double t3090;
  double t3091;
  double t3259;
  double t3260;
  double t3261;
  double t3302;
  double t3303;
  double t3305;
  double t3329;
  double t3330;
  double t3331;
  t50 = Cos(var1[4]);
  t1653 = Cos(var1[14]);
  t1707 = Sin(var1[14]);
  t1904 = 0.984808*t1653;
  t1915 = -0.173648*t1707;
  t1920 = t1904 + t1915;
  t1874 = Sin(var1[4]);
  t1921 = Sin(var1[5]);
  t983 = Cos(var1[5]);
  t1679 = -0.173648*t1653;
  t1857 = -0.984808*t1707;
  t1859 = t1679 + t1857;
  t1890 = t1859*t1874;
  t1927 = -1.*t50*t1920*t1921;
  t1930 = t1890 + t1927;
  t2168 = Cos(var1[3]);
  t2159 = Sin(var1[3]);
  t2012 = t1920*t1874;
  t2015 = 0.173648*t1653;
  t2018 = 0.984808*t1707;
  t2021 = t2015 + t2018;
  t2028 = -1.*t50*t2021*t1921;
  t2040 = t2012 + t2028;
  t2199 = t50*t1859;
  t2212 = t1920*t1874*t1921;
  t2256 = t2199 + t2212;
  t2326 = t50*t1920;
  t2348 = t2021*t1874*t1921;
  t2352 = t2326 + t2348;
  t2490 = -1.*t1653;
  t2494 = 1. + t2490;
  t2509 = 0.12*t2494;
  t2515 = 0.116892*t1653;
  t2516 = 0.0005569999999999742*t1707;
  t2522 = t2509 + t2515 + t2516;
  t2541 = 0.4*t2494;
  t2545 = 0.400557*t1653;
  t2554 = 0.0031079999999999997*t1707;
  t2555 = t2541 + t2545 + t2554;
  t2564 = -0.024405*t983;
  t2565 = -1.*t2522*t1921;
  t2574 = t2564 + t2565;
  t2527 = t983*t2522;
  t2528 = -0.024405*t1921;
  t2537 = t2527 + t2528;
  t2556 = t2555*t1874;
  t2585 = t50*t2574;
  t2586 = t2556 + t2585;
  t2608 = t50*t2555;
  t2610 = -1.*t1874*t2574;
  t2612 = t2608 + t2610;
  t2640 = -1.*t983*t1920*t2537;
  t2752 = t2537*t1921;
  t2771 = t983*t2021*t2537;
  t2706 = t983*t1920*t2537;
  t2721 = -1.*t983*t2021*t2537;
  t2873 = -1.*t1920*t2555;
  t2859 = t1859*t2555;
  t2166 = -1.*t983*t2159*t1874;
  t2173 = -1.*t2168*t1921;
  t2187 = t2166 + t2173;
  t2188 = -0.535396*t50*t983*t2187;
  t2197 = t2168*t983*t1920;
  t2268 = -1.*t2159*t2256;
  t2275 = t2197 + t2268;
  t2322 = 0.535396*t1930*t2275;
  t2325 = t2168*t983*t2021;
  t2373 = -1.*t2159*t2352;
  t2384 = t2325 + t2373;
  t2390 = 0.535396*t2040*t2384;
  t2394 = t2188 + t2322 + t2390;
  t2416 = t2168*t983*t1874;
  t2418 = -1.*t2159*t1921;
  t2419 = t2416 + t2418;
  t2432 = t983*t1920*t2159;
  t2442 = t2168*t2256;
  t2454 = t2432 + t2442;
  t2465 = t983*t2021*t2159;
  t2466 = t2168*t2352;
  t2476 = t2465 + t2466;
  t2540 = -1.*t2537*t1921;
  t2590 = -1.*t50*t983*t2586;
  t2630 = t983*t1874*t2612;
  t2633 = t2540 + t2590 + t2630;
  t2637 = t1930*t2633;
  t2648 = -1.*t1930*t2586;
  t2649 = -1.*t2256*t2612;
  t2667 = t2640 + t2648 + t2649;
  t2674 = -1.*t50*t983*t2667;
  t2691 = t2637 + t2674;
  t2715 = t1930*t2586;
  t2718 = t2256*t2612;
  t2719 = t2706 + t2715 + t2718;
  t2720 = t2040*t2719;
  t2727 = -1.*t2040*t2586;
  t2730 = -1.*t2352*t2612;
  t2733 = t2721 + t2727 + t2730;
  t2742 = t1930*t2733;
  t2744 = t2720 + t2742;
  t2755 = t50*t983*t2586;
  t2761 = -1.*t983*t1874*t2612;
  t2764 = t2752 + t2755 + t2761;
  t2768 = t2040*t2764;
  t2776 = t2040*t2586;
  t2780 = t2352*t2612;
  t2781 = t2771 + t2776 + t2780;
  t2784 = -1.*t50*t983*t2781;
  t2785 = t2768 + t2784;
  t2794 = -1.*t2537*t1921;
  t2795 = -1.*t983*t2574;
  t2796 = t2794 + t2795;
  t2799 = t983*t1920*t2796;
  t2800 = -1.*t1859*t2555;
  t2804 = t1920*t1921*t2574;
  t2805 = t2800 + t2640 + t2804;
  t2808 = -1.*t1921*t2805;
  t2818 = t2799 + t2808;
  t2831 = t983*t2574;
  t2832 = t2752 + t2831;
  t2837 = t983*t2021*t2832;
  t2839 = t1920*t2555;
  t2840 = -1.*t2021*t1921*t2574;
  t2841 = t2839 + t2771 + t2840;
  t2851 = -1.*t1921*t2841;
  t2857 = t2837 + t2851;
  t2860 = -1.*t1920*t1921*t2574;
  t2865 = t2859 + t2706 + t2860;
  t2871 = t983*t2021*t2865;
  t2875 = t2021*t1921*t2574;
  t2880 = t2873 + t2721 + t2875;
  t2884 = t983*t1920*t2880;
  t2886 = t2871 + t2884;
  t2894 = -1.*t2522*t2021;
  t2895 = t2873 + t2894;
  t2898 = t2895*t1859;
  t2899 = t1920*t2522;
  t2903 = t2899 + t2859;
  t2908 = t2903*t1920;
  t2910 = t2898 + t2908;
  t2422 = -0.535396*t50*t983*t2419;
  t2455 = 0.535396*t1930*t2454;
  t2477 = 0.535396*t2040*t2476;
  t2479 = t2422 + t2455 + t2477;
  t2967 = 0.535396*t2187*t2419;
  t2968 = 0.535396*t2454*t2275;
  t2969 = 0.535396*t2476*t2384;
  t2978 = t2967 + t2968 + t2969;
  t2692 = 0.535396*t2040*t2691;
  t2749 = -0.535396*t50*t983*t2744;
  t2787 = 0.535396*t1930*t2785;
  t2793 = t2692 + t2749 + t2787;
  t2979 = 0.535396*t2384*t2691;
  t2983 = 0.535396*t2187*t2744;
  t2988 = 0.535396*t2275*t2785;
  t2990 = t2979 + t2983 + t2988;
  t3041 = 0.535396*t2476*t2691;
  t3042 = 0.535396*t2419*t2744;
  t3051 = 0.535396*t2454*t2785;
  t3054 = t3041 + t3042 + t3051;
  t3093 = -0.000298*t50*t983;
  t3098 = 0.000035*t1930;
  t3100 = 0.000012*t2040;
  t2819 = 0.535396*t2040*t2818;
  t2858 = 0.535396*t1930*t2857;
  t2887 = -0.535396*t50*t983*t2886;
  t2888 = t2819 + t2858 + t2887;
  t2992 = 0.535396*t2384*t2818;
  t2993 = 0.535396*t2275*t2857;
  t2995 = 0.535396*t2187*t2886;
  t3002 = t2992 + t2993 + t2995;
  t3063 = 0.535396*t2476*t2818;
  t3066 = 0.535396*t2454*t2857;
  t3067 = 0.535396*t2419*t2886;
  t3073 = t3063 + t3066 + t3067;
  t3107 = t3093 + t3098 + t3100;
  t3109 = -0.000035*t50*t983;
  t3111 = 0.00075*t1930;
  t3112 = 0.000014*t2040;
  t3113 = t3109 + t3111 + t3112;
  t3116 = -0.000012*t50*t983;
  t3120 = 0.000014*t1930;
  t3123 = 0.000704*t2040;
  t3126 = t3116 + t3120 + t3123;
  t3199 = 0.535396*t2818*t2691;
  t3200 = 0.535396*t2886*t2744;
  t3201 = 0.535396*t2857*t2785;
  t3168 = 0.00075*t983*t1920;
  t3169 = 0.000014*t983*t2021;
  t3171 = -0.000035*t1921;
  t3175 = t3168 + t3169 + t3171;
  t3182 = 0.000014*t983*t1920;
  t3186 = 0.000704*t983*t2021;
  t3190 = -0.000012*t1921;
  t3192 = t3182 + t3186 + t3190;
  t3158 = 0.000035*t983*t1920;
  t3160 = 0.000012*t983*t2021;
  t3161 = -0.000298*t1921;
  t3162 = t3158 + t3160 + t3161;
  t3229 = 0.00075*t1859;
  t3231 = 0.000014*t1920;
  t3236 = t3229 + t3231;
  t3241 = 0.000014*t1859;
  t3242 = 0.000704*t1920;
  t3243 = t3241 + t3242;
  t3204 = 0.000035*t1859;
  t3205 = 0.000012*t1920;
  t3220 = t3204 + t3205;
  t2911 = -0.535396*t50*t983*t2910;
  t2914 = -0.01306633938*t1920*t1930;
  t2923 = 0.01306633938*t1859*t2040;
  t2926 = t2911 + t2914 + t2923;
  t3005 = 0.535396*t2910*t2187;
  t3009 = -0.01306633938*t1920*t2275;
  t3011 = 0.01306633938*t1859*t2384;
  t3015 = t3005 + t3009 + t3011;
  t3079 = 0.535396*t2910*t2419;
  t3080 = -0.01306633938*t1920*t2454;
  t3082 = 0.01306633938*t1859*t2476;
  t3083 = t3079 + t3080 + t3082;
  t3254 = 0.01306633938*t1859*t2691;
  t3255 = 0.535396*t2910*t2744;
  t3256 = -0.01306633938*t1920*t2785;
  t3296 = 0.01306633938*t1859*t2818;
  t3298 = -0.01306633938*t1920*t2857;
  t3299 = 0.535396*t2910*t2886;
  t2932 = 4.732939188496741e-6*t1930;
  t2933 = 0.0016905156540591966*t2040;
  t2940 = t2932 + t2933;
  t3017 = 4.732939188496741e-6*t2275;
  t3018 = 0.0016905156540591966*t2384;
  t3023 = t3017 + t3018;
  t3085 = 4.732939188496741e-6*t2454;
  t3090 = 0.0016905156540591966*t2476;
  t3091 = t3085 + t3090;
  t3259 = 0.0016905156540591966*t2691;
  t3260 = 4.732939188496741e-6*t2785;
  t3261 = t3093 + t3098 + t3100 + t3259 + t3260;
  t3302 = 0.0016905156540591966*t2818;
  t3303 = 4.732939188496741e-6*t2857;
  t3305 = t3158 + t3160 + t3161 + t3302 + t3303;
  t3329 = 0.0000762570345373147*t1859;
  t3330 = 0.000011884492619104737*t1920;
  t3331 = t3329 + t3330;
  p_output1[0]=0.535396*Power(t1930,2) + 0.535396*Power(t2040,2) + 0.535396*Power(t50,2)*Power(t983,2);
  p_output1[1]=t2394;
  p_output1[2]=t2479;
  p_output1[3]=t2793;
  p_output1[4]=t2888;
  p_output1[5]=t2926;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=t2940;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t2394;
  p_output1[31]=0.535396*Power(t2187,2) + 0.535396*Power(t2275,2) + 0.535396*Power(t2384,2);
  p_output1[32]=t2978;
  p_output1[33]=t2990;
  p_output1[34]=t3002;
  p_output1[35]=t3015;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=t3023;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t2479;
  p_output1[61]=t2978;
  p_output1[62]=0.535396*Power(t2419,2) + 0.535396*Power(t2454,2) + 0.535396*Power(t2476,2);
  p_output1[63]=t3054;
  p_output1[64]=t3073;
  p_output1[65]=t3083;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=t3091;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t2793;
  p_output1[91]=t2990;
  p_output1[92]=t3054;
  p_output1[93]=0.535396*Power(t2691,2) + 0.535396*Power(t2744,2) + 0.535396*Power(t2785,2) + t1930*t3113 + t2040*t3126 - 1.*t3107*t50*t983;
  p_output1[94]=t1930*t3175 + t2040*t3192 + t3199 + t3200 + t3201 - 1.*t3162*t50*t983;
  p_output1[95]=t1930*t3236 + t2040*t3243 + t3254 + t3255 + t3256 - 1.*t3220*t50*t983;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=t3261;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t2888;
  p_output1[121]=t3002;
  p_output1[122]=t3073;
  p_output1[123]=-1.*t1921*t3107 + t3199 + t3200 + t3201 + t1920*t3113*t983 + t2021*t3126*t983;
  p_output1[124]=0.535396*Power(t2818,2) + 0.535396*Power(t2857,2) + 0.535396*Power(t2886,2) - 1.*t1921*t3162 + t1920*t3175*t983 + t2021*t3192*t983;
  p_output1[125]=-1.*t1921*t3220 + t3296 + t3298 + t3299 + t1920*t3236*t983 + t2021*t3243*t983;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=t3305;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t2926;
  p_output1[151]=t3015;
  p_output1[152]=t3083;
  p_output1[153]=t1859*t3113 + t1920*t3126 + t3254 + t3255 + t3256;
  p_output1[154]=t1859*t3175 + t1920*t3192 + t3296 + t3298 + t3299;
  p_output1[155]=0.0003188840125689*Power(t1859,2) + 0.0003188840125689*Power(t1920,2) + 0.535396*Power(t2910,2) + t1859*t3236 + t1920*t3243;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=t3331;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=t2940;
  p_output1[421]=t3023;
  p_output1[422]=t3091;
  p_output1[423]=t3261;
  p_output1[424]=t3305;
  p_output1[425]=t3331;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0.0003033378538078965;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L10_digit.hh"

namespace SymFunction
{

void Mmat_L10_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
