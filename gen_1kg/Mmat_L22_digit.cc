/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 20:49:58 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t159;
  double t574;
  double t657;
  double t1698;
  double t2104;
  double t2257;
  double t1593;
  double t2341;
  double t220;
  double t656;
  double t851;
  double t1333;
  double t1629;
  double t2440;
  double t2869;
  double t4193;
  double t4129;
  double t3069;
  double t3396;
  double t3582;
  double t3584;
  double t3836;
  double t3860;
  double t4280;
  double t4281;
  double t4296;
  double t4404;
  double t4429;
  double t4469;
  double t4683;
  double t4688;
  double t4690;
  double t4695;
  double t4727;
  double t4728;
  double t4772;
  double t4773;
  double t4777;
  double t4789;
  double t4792;
  double t4794;
  double t4799;
  double t4729;
  double t4749;
  double t4756;
  double t4791;
  double t4806;
  double t4820;
  double t4835;
  double t4836;
  double t4844;
  double t4867;
  double t4936;
  double t4968;
  double t4889;
  double t4910;
  double t5069;
  double t5060;
  double t4134;
  double t4203;
  double t4223;
  double t4271;
  double t4273;
  double t4382;
  double t4384;
  double t4385;
  double t4396;
  double t4479;
  double t4483;
  double t4512;
  double t4532;
  double t4549;
  double t4564;
  double t4586;
  double t4611;
  double t4620;
  double t4623;
  double t4641;
  double t4645;
  double t4650;
  double t4765;
  double t4821;
  double t4851;
  double t4852;
  double t4854;
  double t4874;
  double t4875;
  double t4878;
  double t4883;
  double t4885;
  double t4891;
  double t4900;
  double t4907;
  double t4909;
  double t4916;
  double t4919;
  double t4923;
  double t4929;
  double t4933;
  double t4950;
  double t4955;
  double t4962;
  double t4967;
  double t4971;
  double t4977;
  double t4978;
  double t4979;
  double t4981;
  double t4998;
  double t5000;
  double t5001;
  double t5002;
  double t5003;
  double t5007;
  double t5019;
  double t5020;
  double t5021;
  double t5032;
  double t5033;
  double t5034;
  double t5037;
  double t5044;
  double t5052;
  double t5053;
  double t5054;
  double t5061;
  double t5063;
  double t5065;
  double t5071;
  double t5072;
  double t5073;
  double t5079;
  double t5083;
  double t5084;
  double t5086;
  double t5087;
  double t5088;
  double t5089;
  double t5097;
  double t4588;
  double t4631;
  double t4662;
  double t4675;
  double t5146;
  double t5148;
  double t5149;
  double t5154;
  double t4886;
  double t4935;
  double t4982;
  double t4983;
  double t5155;
  double t5157;
  double t5163;
  double t5165;
  double t5197;
  double t5199;
  double t5200;
  double t5202;
  double t5244;
  double t5246;
  double t5249;
  double t5024;
  double t5056;
  double t5081;
  double t5082;
  double t5166;
  double t5167;
  double t5169;
  double t5170;
  double t5207;
  double t5208;
  double t5210;
  double t5213;
  double t5233;
  double t5236;
  double t5239;
  double t5242;
  double t5255;
  double t5257;
  double t5263;
  double t5266;
  double t5268;
  double t5330;
  double t5331;
  double t5332;
  double t5314;
  double t5316;
  double t5317;
  double t5318;
  double t5307;
  double t5309;
  double t5311;
  double t5312;
  double t5289;
  double t5290;
  double t5298;
  double t5304;
  double t5350;
  double t5351;
  double t5352;
  double t5357;
  double t5361;
  double t5366;
  double t5336;
  double t5337;
  double t5341;
  double t5109;
  double t5110;
  double t5111;
  double t5115;
  double t5172;
  double t5173;
  double t5174;
  double t5175;
  double t5215;
  double t5216;
  double t5217;
  double t5224;
  double t5368;
  double t5369;
  double t5371;
  double t5433;
  double t5434;
  double t5435;
  double t5117;
  double t5126;
  double t5127;
  double t5182;
  double t5183;
  double t5184;
  double t5229;
  double t5231;
  double t5232;
  double t5378;
  double t5379;
  double t5380;
  double t5437;
  double t5438;
  double t5439;
  double t5458;
  double t5459;
  double t5460;
  t159 = Cos(var1[4]);
  t574 = Cos(var1[26]);
  t657 = Sin(var1[26]);
  t1698 = 0.984808*t574;
  t2104 = 0.173648*t657;
  t2257 = t1698 + t2104;
  t1593 = Sin(var1[4]);
  t2341 = Sin(var1[5]);
  t220 = Cos(var1[5]);
  t656 = 0.173648*t574;
  t851 = -0.984808*t657;
  t1333 = t656 + t851;
  t1629 = t1333*t1593;
  t2440 = -1.*t159*t2257*t2341;
  t2869 = t1629 + t2440;
  t4193 = Cos(var1[3]);
  t4129 = Sin(var1[3]);
  t3069 = t2257*t1593;
  t3396 = -0.173648*t574;
  t3582 = 0.984808*t657;
  t3584 = t3396 + t3582;
  t3836 = -1.*t159*t3584*t2341;
  t3860 = t3069 + t3836;
  t4280 = t159*t1333;
  t4281 = t2257*t1593*t2341;
  t4296 = t4280 + t4281;
  t4404 = t159*t2257;
  t4429 = t3584*t1593*t2341;
  t4469 = t4404 + t4429;
  t4683 = -1.*t574;
  t4688 = 1. + t4683;
  t4690 = -0.12*t4688;
  t4695 = -0.116892*t574;
  t4727 = 0.0005569999999999742*t657;
  t4728 = t4690 + t4695 + t4727;
  t4772 = 0.4*t4688;
  t4773 = 0.400557*t574;
  t4777 = -0.0031079999999999997*t657;
  t4789 = t4772 + t4773 + t4777;
  t4792 = -0.024405*t220;
  t4794 = -1.*t4728*t2341;
  t4799 = t4792 + t4794;
  t4729 = t220*t4728;
  t4749 = -0.024405*t2341;
  t4756 = t4729 + t4749;
  t4791 = t4789*t1593;
  t4806 = t159*t4799;
  t4820 = t4791 + t4806;
  t4835 = t159*t4789;
  t4836 = -1.*t1593*t4799;
  t4844 = t4835 + t4836;
  t4867 = -1.*t220*t2257*t4756;
  t4936 = t4756*t2341;
  t4968 = t220*t3584*t4756;
  t4889 = t220*t2257*t4756;
  t4910 = -1.*t220*t3584*t4756;
  t5069 = -1.*t4789*t2257;
  t5060 = t1333*t4789;
  t4134 = -1.*t220*t4129*t1593;
  t4203 = -1.*t4193*t2341;
  t4223 = t4134 + t4203;
  t4271 = -0.535396*t159*t220*t4223;
  t4273 = t4193*t220*t2257;
  t4382 = -1.*t4129*t4296;
  t4384 = t4273 + t4382;
  t4385 = 0.535396*t2869*t4384;
  t4396 = t4193*t220*t3584;
  t4479 = -1.*t4129*t4469;
  t4483 = t4396 + t4479;
  t4512 = 0.535396*t3860*t4483;
  t4532 = t4271 + t4385 + t4512;
  t4549 = t4193*t220*t1593;
  t4564 = -1.*t4129*t2341;
  t4586 = t4549 + t4564;
  t4611 = t220*t2257*t4129;
  t4620 = t4193*t4296;
  t4623 = t4611 + t4620;
  t4641 = t220*t3584*t4129;
  t4645 = t4193*t4469;
  t4650 = t4641 + t4645;
  t4765 = -1.*t4756*t2341;
  t4821 = -1.*t159*t220*t4820;
  t4851 = t220*t1593*t4844;
  t4852 = t4765 + t4821 + t4851;
  t4854 = t2869*t4852;
  t4874 = -1.*t2869*t4820;
  t4875 = -1.*t4296*t4844;
  t4878 = t4867 + t4874 + t4875;
  t4883 = -1.*t159*t220*t4878;
  t4885 = t4854 + t4883;
  t4891 = t2869*t4820;
  t4900 = t4296*t4844;
  t4907 = t4889 + t4891 + t4900;
  t4909 = t3860*t4907;
  t4916 = -1.*t3860*t4820;
  t4919 = -1.*t4469*t4844;
  t4923 = t4910 + t4916 + t4919;
  t4929 = t2869*t4923;
  t4933 = t4909 + t4929;
  t4950 = t159*t220*t4820;
  t4955 = -1.*t220*t1593*t4844;
  t4962 = t4936 + t4950 + t4955;
  t4967 = t3860*t4962;
  t4971 = t3860*t4820;
  t4977 = t4469*t4844;
  t4978 = t4968 + t4971 + t4977;
  t4979 = -1.*t159*t220*t4978;
  t4981 = t4967 + t4979;
  t4998 = -1.*t4756*t2341;
  t5000 = -1.*t220*t4799;
  t5001 = t4998 + t5000;
  t5002 = t220*t2257*t5001;
  t5003 = -1.*t1333*t4789;
  t5007 = t2257*t2341*t4799;
  t5019 = t5003 + t4867 + t5007;
  t5020 = -1.*t2341*t5019;
  t5021 = t5002 + t5020;
  t5032 = t220*t4799;
  t5033 = t4936 + t5032;
  t5034 = t220*t3584*t5033;
  t5037 = t4789*t2257;
  t5044 = -1.*t3584*t2341*t4799;
  t5052 = t5037 + t4968 + t5044;
  t5053 = -1.*t2341*t5052;
  t5054 = t5034 + t5053;
  t5061 = -1.*t2257*t2341*t4799;
  t5063 = t5060 + t4889 + t5061;
  t5065 = t220*t3584*t5063;
  t5071 = t3584*t2341*t4799;
  t5072 = t5069 + t4910 + t5071;
  t5073 = t220*t2257*t5072;
  t5079 = t5065 + t5073;
  t5083 = -1.*t4728*t3584;
  t5084 = t5069 + t5083;
  t5086 = t5084*t1333;
  t5087 = t4728*t2257;
  t5088 = t5060 + t5087;
  t5089 = t5088*t2257;
  t5097 = t5086 + t5089;
  t4588 = -0.535396*t159*t220*t4586;
  t4631 = 0.535396*t2869*t4623;
  t4662 = 0.535396*t3860*t4650;
  t4675 = t4588 + t4631 + t4662;
  t5146 = 0.535396*t4223*t4586;
  t5148 = 0.535396*t4623*t4384;
  t5149 = 0.535396*t4650*t4483;
  t5154 = t5146 + t5148 + t5149;
  t4886 = 0.535396*t3860*t4885;
  t4935 = -0.535396*t159*t220*t4933;
  t4982 = 0.535396*t2869*t4981;
  t4983 = t4886 + t4935 + t4982;
  t5155 = 0.535396*t4483*t4885;
  t5157 = 0.535396*t4223*t4933;
  t5163 = 0.535396*t4384*t4981;
  t5165 = t5155 + t5157 + t5163;
  t5197 = 0.535396*t4650*t4885;
  t5199 = 0.535396*t4586*t4933;
  t5200 = 0.535396*t4623*t4981;
  t5202 = t5197 + t5199 + t5200;
  t5244 = -0.000298*t159*t220;
  t5246 = -0.000035*t2869;
  t5249 = 0.000012*t3860;
  t5024 = 0.535396*t3860*t5021;
  t5056 = 0.535396*t2869*t5054;
  t5081 = -0.535396*t159*t220*t5079;
  t5082 = t5024 + t5056 + t5081;
  t5166 = 0.535396*t4483*t5021;
  t5167 = 0.535396*t4384*t5054;
  t5169 = 0.535396*t4223*t5079;
  t5170 = t5166 + t5167 + t5169;
  t5207 = 0.535396*t4650*t5021;
  t5208 = 0.535396*t4623*t5054;
  t5210 = 0.535396*t4586*t5079;
  t5213 = t5207 + t5208 + t5210;
  t5233 = 0.000035*t159*t220;
  t5236 = 0.00075*t2869;
  t5239 = -0.000014*t3860;
  t5242 = t5233 + t5236 + t5239;
  t5255 = t5244 + t5246 + t5249;
  t5257 = -0.000012*t159*t220;
  t5263 = -0.000014*t2869;
  t5266 = 0.000704*t3860;
  t5268 = t5257 + t5263 + t5266;
  t5330 = 0.535396*t5021*t4885;
  t5331 = 0.535396*t5079*t4933;
  t5332 = 0.535396*t5054*t4981;
  t5314 = -0.000014*t220*t2257;
  t5316 = 0.000704*t220*t3584;
  t5317 = -0.000012*t2341;
  t5318 = t5314 + t5316 + t5317;
  t5307 = 0.00075*t220*t2257;
  t5309 = -0.000014*t220*t3584;
  t5311 = 0.000035*t2341;
  t5312 = t5307 + t5309 + t5311;
  t5289 = -0.000035*t220*t2257;
  t5290 = 0.000012*t220*t3584;
  t5298 = -0.000298*t2341;
  t5304 = t5289 + t5290 + t5298;
  t5350 = 0.00075*t1333;
  t5351 = -0.000014*t2257;
  t5352 = t5350 + t5351;
  t5357 = -0.000014*t1333;
  t5361 = 0.000704*t2257;
  t5366 = t5357 + t5361;
  t5336 = -0.000035*t1333;
  t5337 = 0.000012*t2257;
  t5341 = t5336 + t5337;
  t5109 = -0.535396*t159*t220*t5097;
  t5110 = -0.01306633938*t2257*t2869;
  t5111 = 0.01306633938*t1333*t3860;
  t5115 = t5109 + t5110 + t5111;
  t5172 = 0.535396*t5097*t4223;
  t5173 = -0.01306633938*t2257*t4384;
  t5174 = 0.01306633938*t1333*t4483;
  t5175 = t5172 + t5173 + t5174;
  t5215 = 0.535396*t5097*t4586;
  t5216 = -0.01306633938*t2257*t4623;
  t5217 = 0.01306633938*t1333*t4650;
  t5224 = t5215 + t5216 + t5217;
  t5368 = 0.01306633938*t1333*t4885;
  t5369 = 0.535396*t5097*t4933;
  t5371 = -0.01306633938*t2257*t4981;
  t5433 = 0.01306633938*t1333*t5021;
  t5434 = -0.01306633938*t2257*t5054;
  t5435 = 0.535396*t5097*t5079;
  t5117 = 4.732939188496741e-6*t2869;
  t5126 = -0.0016905156540591966*t3860;
  t5127 = t5117 + t5126;
  t5182 = 4.732939188496741e-6*t4384;
  t5183 = -0.0016905156540591966*t4483;
  t5184 = t5182 + t5183;
  t5229 = 4.732939188496741e-6*t4623;
  t5231 = -0.0016905156540591966*t4650;
  t5232 = t5229 + t5231;
  t5378 = -0.0016905156540591966*t4885;
  t5379 = 4.732939188496741e-6*t4981;
  t5380 = t5244 + t5246 + t5249 + t5378 + t5379;
  t5437 = -0.0016905156540591966*t5021;
  t5438 = 4.732939188496741e-6*t5054;
  t5439 = t5289 + t5290 + t5298 + t5437 + t5438;
  t5458 = -0.0000762570345373147*t1333;
  t5459 = 0.000011884492619104737*t2257;
  t5460 = t5458 + t5459;
  p_output1[0]=0.535396*Power(t159,2)*Power(t220,2) + 0.535396*Power(t2869,2) + 0.535396*Power(t3860,2);
  p_output1[1]=t4532;
  p_output1[2]=t4675;
  p_output1[3]=t4983;
  p_output1[4]=t5082;
  p_output1[5]=t5115;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=t5127;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t4532;
  p_output1[31]=0.535396*Power(t4223,2) + 0.535396*Power(t4384,2) + 0.535396*Power(t4483,2);
  p_output1[32]=t5154;
  p_output1[33]=t5165;
  p_output1[34]=t5170;
  p_output1[35]=t5175;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=t5184;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t4675;
  p_output1[61]=t5154;
  p_output1[62]=0.535396*Power(t4586,2) + 0.535396*Power(t4623,2) + 0.535396*Power(t4650,2);
  p_output1[63]=t5202;
  p_output1[64]=t5213;
  p_output1[65]=t5224;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=t5232;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t4983;
  p_output1[91]=t5165;
  p_output1[92]=t5202;
  p_output1[93]=0.535396*Power(t4885,2) + 0.535396*Power(t4933,2) + 0.535396*Power(t4981,2) + t2869*t5242 - 1.*t159*t220*t5255 + t3860*t5268;
  p_output1[94]=-1.*t159*t220*t5304 + t2869*t5312 + t3860*t5318 + t5330 + t5331 + t5332;
  p_output1[95]=-1.*t159*t220*t5341 + t2869*t5352 + t3860*t5366 + t5368 + t5369 + t5371;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=t5380;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t5082;
  p_output1[121]=t5170;
  p_output1[122]=t5213;
  p_output1[123]=t220*t2257*t5242 - 1.*t2341*t5255 + t220*t3584*t5268 + t5330 + t5331 + t5332;
  p_output1[124]=0.535396*Power(t5021,2) + 0.535396*Power(t5054,2) + 0.535396*Power(t5079,2) - 1.*t2341*t5304 + t220*t2257*t5312 + t220*t3584*t5318;
  p_output1[125]=-1.*t2341*t5341 + t220*t2257*t5352 + t220*t3584*t5366 + t5433 + t5434 + t5435;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=t5439;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t5115;
  p_output1[151]=t5175;
  p_output1[152]=t5224;
  p_output1[153]=t1333*t5242 + t2257*t5268 + t5368 + t5369 + t5371;
  p_output1[154]=t1333*t5312 + t2257*t5318 + t5433 + t5434 + t5435;
  p_output1[155]=0.0003188840125689*Power(t1333,2) + 0.0003188840125689*Power(t2257,2) + 0.535396*Power(t5097,2) + t1333*t5352 + t2257*t5366;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=t5460;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=0;
  p_output1[421]=0;
  p_output1[422]=0;
  p_output1[423]=0;
  p_output1[424]=0;
  p_output1[425]=0;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=t5127;
  p_output1[781]=t5184;
  p_output1[782]=t5232;
  p_output1[783]=t5380;
  p_output1[784]=t5439;
  p_output1[785]=t5460;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0.0003033378538078965;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L22_digit.hh"

namespace SymFunction
{

void Mmat_L22_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
