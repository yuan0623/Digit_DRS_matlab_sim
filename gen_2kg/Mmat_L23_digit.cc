/*
 * Automatically Generated from Mathematica.
 * Tue 4 Jul 2023 15:39:33 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t2328;
  double t2331;
  double t2432;
  double t1104;
  double t2540;
  double t2544;
  double t2551;
  double t2562;
  double t2610;
  double t2453;
  double t2465;
  double t2487;
  double t2490;
  double t2502;
  double t2617;
  double t2807;
  double t2652;
  double t2696;
  double t2774;
  double t2776;
  double t2808;
  double t2809;
  double t2819;
  double t2828;
  double t2836;
  double t2837;
  double t2729;
  double t2857;
  double t2868;
  double t2874;
  double t2875;
  double t2970;
  double t2971;
  double t2986;
  double t2989;
  double t2993;
  double t2999;
  double t2528;
  double t2623;
  double t2649;
  double t2684;
  double t2698;
  double t2704;
  double t2708;
  double t2738;
  double t2749;
  double t2755;
  double t2760;
  double t2814;
  double t2845;
  double t2855;
  double t2856;
  double t2879;
  double t2888;
  double t2890;
  double t2895;
  double t2903;
  double t2909;
  double t2914;
  double t2925;
  double t2936;
  double t2944;
  double t3040;
  double t3069;
  double t2987;
  double t3000;
  double t3002;
  double t3004;
  double t3005;
  double t3016;
  double t3023;
  double t3024;
  double t3025;
  double t3026;
  double t3030;
  double t3032;
  double t3033;
  double t3035;
  double t3054;
  double t3055;
  double t3070;
  double t3072;
  double t3074;
  double t3080;
  double t3085;
  double t3086;
  double t3091;
  double t3092;
  double t3097;
  double t3105;
  double t3109;
  double t3110;
  double t3112;
  double t3116;
  double t3119;
  double t3164;
  double t3165;
  double t3169;
  double t3171;
  double t3173;
  double t3175;
  double t3176;
  double t3179;
  double t3182;
  double t3183;
  double t3184;
  double t3185;
  double t3196;
  double t3197;
  double t3199;
  double t3201;
  double t3167;
  double t3168;
  double t3177;
  double t3190;
  double t3194;
  double t3215;
  double t3217;
  double t3218;
  double t3221;
  double t3223;
  double t3231;
  double t3232;
  double t3234;
  double t3195;
  double t3203;
  double t3204;
  double t3230;
  double t3236;
  double t3237;
  double t3242;
  double t3244;
  double t3245;
  double t3208;
  double t3257;
  double t3265;
  double t3281;
  double t3295;
  double t3306;
  double t3374;
  double t3378;
  double t3359;
  double t3365;
  double t3337;
  double t3323;
  double t3395;
  double t3388;
  double t3056;
  double t3075;
  double t3076;
  double t3077;
  double t3088;
  double t3099;
  double t3101;
  double t3104;
  double t3111;
  double t3124;
  double t3127;
  double t3129;
  double t3130;
  double t3131;
  double t3132;
  double t3135;
  double t3138;
  double t3142;
  double t3149;
  double t3152;
  double t3153;
  double t3154;
  double t3238;
  double t3249;
  double t3250;
  double t3255;
  double t3258;
  double t3259;
  double t3260;
  double t3262;
  double t3263;
  double t3269;
  double t3272;
  double t3273;
  double t3274;
  double t3283;
  double t3284;
  double t3287;
  double t3291;
  double t3293;
  double t3301;
  double t3303;
  double t3304;
  double t3305;
  double t3307;
  double t3308;
  double t3310;
  double t3312;
  double t3320;
  double t3327;
  double t3328;
  double t3332;
  double t3338;
  double t3341;
  double t3343;
  double t3344;
  double t3362;
  double t3363;
  double t3364;
  double t3366;
  double t3367;
  double t3368;
  double t3372;
  double t3375;
  double t3376;
  double t3377;
  double t3381;
  double t3382;
  double t3383;
  double t3384;
  double t3387;
  double t3389;
  double t3390;
  double t3391;
  double t3396;
  double t3397;
  double t3398;
  double t3400;
  double t3401;
  double t3402;
  double t3403;
  double t3404;
  double t3405;
  double t3406;
  double t3407;
  double t3412;
  double t3413;
  double t3414;
  double t3416;
  double t3417;
  double t3418;
  double t3419;
  double t3420;
  double t3423;
  double t3424;
  double t3425;
  double t3426;
  double t3428;
  double t3429;
  double t3430;
  double t3431;
  double t3432;
  double t3436;
  double t3437;
  double t3439;
  double t3440;
  double t3442;
  double t3444;
  double t3445;
  double t3446;
  double t3447;
  double t3449;
  double t3450;
  double t3452;
  double t3453;
  double t3454;
  double t3455;
  double t3459;
  double t3137;
  double t3150;
  double t3157;
  double t3160;
  double t3479;
  double t3480;
  double t3481;
  double t3483;
  double t3264;
  double t3294;
  double t3321;
  double t3322;
  double t3486;
  double t3487;
  double t3488;
  double t3489;
  double t3522;
  double t3527;
  double t3529;
  double t3530;
  double t3649;
  double t3654;
  double t3656;
  double t3358;
  double t3373;
  double t3385;
  double t3386;
  double t3491;
  double t3492;
  double t3493;
  double t3496;
  double t3531;
  double t3532;
  double t3533;
  double t3534;
  double t3553;
  double t3554;
  double t3555;
  double t3557;
  double t3560;
  double t3561;
  double t3562;
  double t3563;
  double t3569;
  double t3572;
  double t3574;
  double t3576;
  double t3619;
  double t3620;
  double t3621;
  double t3595;
  double t3596;
  double t3597;
  double t3598;
  double t3600;
  double t3601;
  double t3602;
  double t3606;
  double t3611;
  double t3612;
  double t3613;
  double t3617;
  double t3623;
  double t3624;
  double t3625;
  double t3626;
  double t3630;
  double t3631;
  double t3635;
  double t3636;
  double t3638;
  double t3639;
  double t3640;
  double t3641;
  double t3655;
  double t3657;
  double t3658;
  double t3660;
  double t3661;
  double t3662;
  double t3664;
  double t3668;
  double t3669;
  double t3399;
  double t3411;
  double t3421;
  double t3422;
  double t3497;
  double t3498;
  double t3499;
  double t3503;
  double t3535;
  double t3537;
  double t3538;
  double t3542;
  double t3643;
  double t3646;
  double t3647;
  double t3717;
  double t3718;
  double t3719;
  double t3438;
  double t3448;
  double t3460;
  double t3462;
  double t3504;
  double t3506;
  double t3508;
  double t3509;
  double t3543;
  double t3544;
  double t3545;
  double t3547;
  double t3673;
  double t3674;
  double t3675;
  double t3730;
  double t3731;
  double t3732;
  double t3765;
  double t3769;
  double t3770;
  double t3464;
  double t3465;
  double t3466;
  double t3467;
  double t3510;
  double t3511;
  double t3512;
  double t3513;
  double t3549;
  double t3550;
  double t3551;
  double t3552;
  double t3682;
  double t3683;
  double t3684;
  double t3740;
  double t3741;
  double t3742;
  double t3773;
  double t3774;
  double t3775;
  double t3803;
  double t3804;
  double t3805;
  t2328 = Cos(var1[27]);
  t2331 = -1.*t2328;
  t2432 = 1. + t2331;
  t1104 = Cos(var1[26]);
  t2540 = -0.010926102783999999*t2432;
  t2544 = 1. + t2540;
  t2551 = 0.994522*t2544;
  t2562 = 0.010866249592949247*t2432;
  t2610 = t2551 + t2562;
  t2453 = -0.9890740084840001*t2432;
  t2465 = 1. + t2453;
  t2487 = -0.104528*t2465;
  t2490 = -0.10338592795881554*t2432;
  t2502 = t2487 + t2490;
  t2617 = Sin(var1[26]);
  t2807 = Sin(var1[27]);
  t2652 = Sin(var1[4]);
  t2696 = Cos(var1[4]);
  t2774 = 0.073913*t2544;
  t2776 = -0.07310496868062215*t2432;
  t2808 = 0.07391248049600001*t2807;
  t2809 = t2774 + t2776 + t2808;
  t2819 = 0.703234*t2465;
  t2828 = -0.007683655156165408*t2432;
  t2836 = 0.7032334678540001*t2807;
  t2837 = t2819 + t2828 + t2836;
  t2729 = Sin(var1[5]);
  t2857 = Cos(var1[5]);
  t2868 = -1.0000001112680001*t2432;
  t2874 = 1. + t2868;
  t2875 = 0.707107*t2874;
  t2970 = -0.073913*t2544;
  t2971 = 0.07310496868062215*t2432;
  t2986 = t2970 + t2971 + t2808;
  t2989 = -0.703234*t2465;
  t2993 = 0.007683655156165408*t2432;
  t2999 = t2989 + t2993 + t2836;
  t2528 = t1104*t2502;
  t2623 = -1.*t2610*t2617;
  t2649 = t2528 + t2623;
  t2684 = t2649*t2652;
  t2698 = t1104*t2610;
  t2704 = t2502*t2617;
  t2708 = t2698 + t2704;
  t2738 = -1.*t2708*t2729;
  t2749 = 0. + t2738;
  t2755 = t2696*t2749;
  t2760 = t2684 + t2755;
  t2814 = -1.*t2617*t2809;
  t2845 = t1104*t2837;
  t2855 = t2814 + t2845;
  t2856 = t2855*t2652;
  t2879 = -0.707107662212*t2807;
  t2888 = t2875 + t2879;
  t2890 = t2857*t2888;
  t2895 = t1104*t2809;
  t2903 = t2617*t2837;
  t2909 = t2895 + t2903;
  t2914 = -1.*t2909*t2729;
  t2925 = t2890 + t2914;
  t2936 = t2696*t2925;
  t2944 = t2856 + t2936;
  t3040 = Cos(var1[3]);
  t3069 = Sin(var1[3]);
  t2987 = -1.*t2617*t2986;
  t3000 = t1104*t2999;
  t3002 = t2987 + t3000;
  t3004 = t3002*t2652;
  t3005 = 0.707107662212*t2807;
  t3016 = t2875 + t3005;
  t3023 = t2857*t3016;
  t3024 = t1104*t2986;
  t3025 = t2617*t2999;
  t3026 = t3024 + t3025;
  t3030 = -1.*t3026*t2729;
  t3032 = t3023 + t3030;
  t3033 = t2696*t3032;
  t3035 = t3004 + t3033;
  t3054 = t2857*t2708;
  t3055 = 0. + t3054;
  t3070 = t2696*t2649;
  t3072 = -1.*t2652*t2749;
  t3074 = t3070 + t3072;
  t3080 = t2857*t2909;
  t3085 = t2888*t2729;
  t3086 = t3080 + t3085;
  t3091 = t2696*t2855;
  t3092 = -1.*t2652*t2925;
  t3097 = t3091 + t3092;
  t3105 = t2857*t3026;
  t3109 = t3016*t2729;
  t3110 = t3105 + t3109;
  t3112 = t2696*t3002;
  t3116 = -1.*t2652*t3032;
  t3119 = t3112 + t3116;
  t3164 = -1.*t1104;
  t3165 = 1. + t3164;
  t3169 = 1.1345904784751044e-7*var1[27];
  t3171 = -0.186523*t2544;
  t3173 = 0.002538918186505569*t2432;
  t3175 = 0.0045707510541009595*t2807;
  t3176 = t3169 + t3171 + t3173 + t3175;
  t3179 = -1.1924972351948546e-8*var1[27];
  t3182 = 0.362964*t2465;
  t3183 = 0.40254463321932016*t2432;
  t3184 = 0.04348798867123255*t2807;
  t3185 = t3179 + t3182 + t3183 + t3184;
  t3196 = -0.012773*t2874;
  t3197 = -0.056500534356700764*t2432;
  t3199 = 0.04378623580366603*t2807;
  t3201 = t3196 + t3197 + t3199;
  t3167 = -0.12*t3165;
  t3168 = -0.4*t2617;
  t3177 = t1104*t3176;
  t3190 = t2617*t3185;
  t3194 = t3167 + t3168 + t3177 + t3190;
  t3215 = 0.4*t3165;
  t3217 = -0.12*t2617;
  t3218 = -1.*t2617*t3176;
  t3221 = t1104*t3185;
  t3223 = t3215 + t3217 + t3218 + t3221;
  t3231 = t2857*t3201;
  t3232 = -1.*t3194*t2729;
  t3234 = t3231 + t3232;
  t3195 = t2857*t3194;
  t3203 = t3201*t2729;
  t3204 = t3195 + t3203;
  t3230 = t3223*t2652;
  t3236 = t2696*t3234;
  t3237 = t3230 + t3236;
  t3242 = t2696*t3223;
  t3244 = -1.*t2652*t3234;
  t3245 = t3242 + t3244;
  t3208 = -1.*t3055*t3204;
  t3257 = t3086*t3204;
  t3265 = t3055*t3204;
  t3281 = -1.*t3204*t3110;
  t3295 = -1.*t3086*t3204;
  t3306 = t3204*t3110;
  t3374 = -1.*t3223*t2855;
  t3378 = t3223*t3002;
  t3359 = t2649*t3223;
  t3365 = -1.*t3223*t3002;
  t3337 = t3223*t2855;
  t3323 = -1.*t2649*t3223;
  t3395 = t3201*t3016;
  t3388 = -1.*t2888*t3201;
  t3056 = t3040*t3055;
  t3075 = -1.*t3069*t3074;
  t3076 = t3056 + t3075;
  t3077 = 1.440357*t2760*t3076;
  t3088 = t3040*t3086;
  t3099 = -1.*t3069*t3097;
  t3101 = t3088 + t3099;
  t3104 = 1.440357*t2944*t3101;
  t3111 = t3040*t3110;
  t3124 = -1.*t3069*t3119;
  t3127 = t3111 + t3124;
  t3129 = 1.440357*t3035*t3127;
  t3130 = t3077 + t3104 + t3129;
  t3131 = t3055*t3069;
  t3132 = t3040*t3074;
  t3135 = t3131 + t3132;
  t3138 = t3069*t3086;
  t3142 = t3040*t3097;
  t3149 = t3138 + t3142;
  t3152 = t3069*t3110;
  t3153 = t3040*t3119;
  t3154 = t3152 + t3153;
  t3238 = -1.*t2760*t3237;
  t3249 = -1.*t3074*t3245;
  t3250 = t3208 + t3238 + t3249;
  t3255 = t2944*t3250;
  t3258 = t3237*t2944;
  t3259 = t3245*t3097;
  t3260 = t3257 + t3258 + t3259;
  t3262 = t2760*t3260;
  t3263 = t3255 + t3262;
  t3269 = t2760*t3237;
  t3272 = t3074*t3245;
  t3273 = t3265 + t3269 + t3272;
  t3274 = t3035*t3273;
  t3283 = -1.*t3237*t3035;
  t3284 = -1.*t3245*t3119;
  t3287 = t3281 + t3283 + t3284;
  t3291 = t2760*t3287;
  t3293 = t3274 + t3291;
  t3301 = -1.*t3237*t2944;
  t3303 = -1.*t3245*t3097;
  t3304 = t3295 + t3301 + t3303;
  t3305 = t3035*t3304;
  t3307 = t3237*t3035;
  t3308 = t3245*t3119;
  t3310 = t3306 + t3307 + t3308;
  t3312 = t2944*t3310;
  t3320 = t3305 + t3312;
  t3327 = -1.*t2749*t3234;
  t3328 = t3323 + t3327 + t3208;
  t3332 = t3086*t3328;
  t3338 = t3234*t2925;
  t3341 = t3337 + t3338 + t3257;
  t3343 = t3055*t3341;
  t3344 = t3332 + t3343;
  t3362 = t2749*t3234;
  t3363 = t3359 + t3362 + t3265;
  t3364 = t3110*t3363;
  t3366 = -1.*t3234*t3032;
  t3367 = t3365 + t3366 + t3281;
  t3368 = t3055*t3367;
  t3372 = t3364 + t3368;
  t3375 = -1.*t3234*t2925;
  t3376 = t3374 + t3375 + t3295;
  t3377 = t3110*t3376;
  t3381 = t3234*t3032;
  t3382 = t3378 + t3381 + t3306;
  t3383 = t3086*t3382;
  t3384 = t3377 + t3383;
  t3387 = -1.*t3194*t2909;
  t3389 = t3374 + t3387 + t3388;
  t3390 = t3389*t3002;
  t3391 = t3194*t3026;
  t3396 = t3378 + t3391 + t3395;
  t3397 = t2855*t3396;
  t3398 = t3390 + t3397;
  t3400 = t2708*t3194;
  t3401 = 0. + t3359 + t3400;
  t3402 = t3401*t3002;
  t3403 = -1.*t3194*t3026;
  t3404 = -1.*t3201*t3016;
  t3405 = t3365 + t3403 + t3404;
  t3406 = t2649*t3405;
  t3407 = t3402 + t3406;
  t3412 = t3194*t2909;
  t3413 = t2888*t3201;
  t3414 = t3337 + t3412 + t3413;
  t3416 = t2649*t3414;
  t3417 = -1.*t2708*t3194;
  t3418 = 0. + t3323 + t3417;
  t3419 = t3418*t2855;
  t3420 = t3416 + t3419;
  t3423 = -0.12*t2502;
  t3424 = -0.4*t2610;
  t3425 = t3176*t2986;
  t3426 = t3185*t2999;
  t3428 = t3425 + t3426 + t3395;
  t3429 = -1.*t3428*t2888;
  t3430 = -1.*t3176*t2809;
  t3431 = -1.*t3185*t2837;
  t3432 = t3388 + t3430 + t3431;
  t3436 = -1.*t3432*t3016;
  t3437 = t3423 + t3424 + t3429 + t3436;
  t3439 = -0.4*t2809;
  t3440 = -0.12*t2837;
  t3442 = t2610*t3176;
  t3444 = t2502*t3185;
  t3445 = 0. + t3442 + t3444;
  t3446 = -1.*t3445*t3016;
  t3447 = 0. + t3439 + t3440 + t3446;
  t3449 = -1.*t2610*t3176;
  t3450 = -1.*t2502*t3185;
  t3452 = 0. + t3449 + t3450;
  t3453 = -1.*t3452*t2888;
  t3454 = -0.4*t2986;
  t3455 = -0.12*t2999;
  t3459 = 0. + t3453 + t3454 + t3455;
  t3137 = 1.440357*t2760*t3135;
  t3150 = 1.440357*t2944*t3149;
  t3157 = 1.440357*t3035*t3154;
  t3160 = t3137 + t3150 + t3157;
  t3479 = 1.440357*t3135*t3076;
  t3480 = 1.440357*t3149*t3101;
  t3481 = 1.440357*t3154*t3127;
  t3483 = t3479 + t3480 + t3481;
  t3264 = 1.440357*t3035*t3263;
  t3294 = 1.440357*t2944*t3293;
  t3321 = 1.440357*t2760*t3320;
  t3322 = t3264 + t3294 + t3321;
  t3486 = 1.440357*t3127*t3263;
  t3487 = 1.440357*t3101*t3293;
  t3488 = 1.440357*t3076*t3320;
  t3489 = t3486 + t3487 + t3488;
  t3522 = 1.440357*t3154*t3263;
  t3527 = 1.440357*t3149*t3293;
  t3529 = 1.440357*t3135*t3320;
  t3530 = t3522 + t3527 + t3529;
  t3649 = -0.707107*t2874;
  t3654 = t3649 + t2879;
  t3656 = t3649 + t3005;
  t3358 = 1.440357*t3035*t3344;
  t3373 = 1.440357*t2944*t3372;
  t3385 = 1.440357*t2760*t3384;
  t3386 = t3358 + t3373 + t3385;
  t3491 = 1.440357*t3127*t3344;
  t3492 = 1.440357*t3101*t3372;
  t3493 = 1.440357*t3076*t3384;
  t3496 = t3491 + t3492 + t3493;
  t3531 = 1.440357*t3154*t3344;
  t3532 = 1.440357*t3149*t3372;
  t3533 = 1.440357*t3135*t3384;
  t3534 = t3531 + t3532 + t3533;
  t3553 = -3.e-6*t2760;
  t3554 = 0.006761*t2944;
  t3555 = 6.e-6*t3035;
  t3557 = t3553 + t3554 + t3555;
  t3560 = 0.005778*t2760;
  t3561 = -3.e-6*t2944;
  t3562 = 0.002046*t3035;
  t3563 = t3560 + t3561 + t3562;
  t3569 = 0.002046*t2760;
  t3572 = 6.e-6*t2944;
  t3574 = 0.002087*t3035;
  t3576 = t3569 + t3572 + t3574;
  t3619 = 1.440357*t3344*t3263;
  t3620 = 1.440357*t3372*t3293;
  t3621 = 1.440357*t3384*t3320;
  t3595 = -3.e-6*t3055;
  t3596 = 0.006761*t3086;
  t3597 = 6.e-6*t3110;
  t3598 = t3595 + t3596 + t3597;
  t3600 = 0.005778*t3055;
  t3601 = -3.e-6*t3086;
  t3602 = 0.002046*t3110;
  t3606 = t3600 + t3601 + t3602;
  t3611 = 0.002046*t3055;
  t3612 = 6.e-6*t3086;
  t3613 = 0.002087*t3110;
  t3617 = t3611 + t3612 + t3613;
  t3623 = 0.005778*t2649;
  t3624 = -3.e-6*t2855;
  t3625 = 0.002046*t3002;
  t3626 = t3623 + t3624 + t3625;
  t3630 = -3.e-6*t2649;
  t3631 = 0.006761*t2855;
  t3635 = 6.e-6*t3002;
  t3636 = t3630 + t3631 + t3635;
  t3638 = 0.002046*t2649;
  t3639 = 6.e-6*t2855;
  t3640 = 0.002087*t3002;
  t3641 = t3638 + t3639 + t3640;
  t3655 = 0.002046*t3654;
  t3657 = -3.e-6*t3656;
  t3658 = t3655 + t3657;
  t3660 = 6.e-6*t3654;
  t3661 = 0.006761*t3656;
  t3662 = t3660 + t3661;
  t3664 = 0.002087*t3654;
  t3668 = 6.e-6*t3656;
  t3669 = t3664 + t3668;
  t3399 = 1.440357*t3398*t2760;
  t3411 = 1.440357*t3407*t2944;
  t3421 = 1.440357*t3420*t3035;
  t3422 = t3399 + t3411 + t3421;
  t3497 = 1.440357*t3398*t3076;
  t3498 = 1.440357*t3407*t3101;
  t3499 = 1.440357*t3420*t3127;
  t3503 = t3497 + t3498 + t3499;
  t3535 = 1.440357*t3398*t3135;
  t3537 = 1.440357*t3407*t3149;
  t3538 = 1.440357*t3420*t3154;
  t3542 = t3535 + t3537 + t3538;
  t3643 = 1.440357*t3420*t3263;
  t3646 = 1.440357*t3407*t3293;
  t3647 = 1.440357*t3398*t3320;
  t3717 = 1.440357*t3420*t3344;
  t3718 = 1.440357*t3407*t3372;
  t3719 = 1.440357*t3398*t3384;
  t3438 = 1.440357*t3437*t2760;
  t3448 = 1.440357*t3447*t2944;
  t3460 = 1.440357*t3459*t3035;
  t3462 = t3438 + t3448 + t3460;
  t3504 = 1.440357*t3437*t3076;
  t3506 = 1.440357*t3447*t3101;
  t3508 = 1.440357*t3459*t3127;
  t3509 = t3504 + t3506 + t3508;
  t3543 = 1.440357*t3437*t3135;
  t3544 = 1.440357*t3447*t3149;
  t3545 = 1.440357*t3459*t3154;
  t3547 = t3543 + t3544 + t3545;
  t3673 = 1.440357*t3459*t3263;
  t3674 = 1.440357*t3447*t3293;
  t3675 = 1.440357*t3437*t3320;
  t3730 = 1.440357*t3459*t3344;
  t3731 = 1.440357*t3447*t3372;
  t3732 = 1.440357*t3437*t3384;
  t3765 = 1.440357*t3420*t3459;
  t3769 = 1.440357*t3407*t3447;
  t3770 = 1.440357*t3398*t3437;
  t3464 = 1.7631698888227975e-7*t2760;
  t3465 = 0.08913126524571312*t2944;
  t3466 = 0.00005937762408158729*t3035;
  t3467 = t3464 + t3465 + t3466;
  t3510 = 1.7631698888227975e-7*t3076;
  t3511 = 0.08913126524571312*t3101;
  t3512 = 0.00005937762408158729*t3127;
  t3513 = t3510 + t3511 + t3512;
  t3549 = 1.7631698888227975e-7*t3135;
  t3550 = 0.08913126524571312*t3149;
  t3551 = 0.00005937762408158729*t3154;
  t3552 = t3549 + t3550 + t3551;
  t3682 = 0.00005937762408158729*t3263;
  t3683 = 0.08913126524571312*t3293;
  t3684 = 1.7631698888227975e-7*t3320;
  t3740 = 0.00005937762408158729*t3344;
  t3741 = 0.08913126524571312*t3372;
  t3742 = 1.7631698888227975e-7*t3384;
  t3773 = 0.00005937762408158729*t3420;
  t3774 = 0.08913126524571312*t3407;
  t3775 = 1.7631698888227975e-7*t3398;
  t3803 = 0.00005937762408158729*t3459;
  t3804 = 0.08913126524571312*t3447;
  t3805 = 1.7631698888227975e-7*t3437;
  p_output1[0]=1.440357*Power(t2760,2) + 1.440357*Power(t2944,2) + 1.440357*Power(t3035,2);
  p_output1[1]=t3130;
  p_output1[2]=t3160;
  p_output1[3]=t3322;
  p_output1[4]=t3386;
  p_output1[5]=t3422;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=t3462;
  p_output1[27]=t3467;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t3130;
  p_output1[31]=1.440357*Power(t3076,2) + 1.440357*Power(t3101,2) + 1.440357*Power(t3127,2);
  p_output1[32]=t3483;
  p_output1[33]=t3489;
  p_output1[34]=t3496;
  p_output1[35]=t3503;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=t3509;
  p_output1[57]=t3513;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t3160;
  p_output1[61]=t3483;
  p_output1[62]=1.440357*Power(t3135,2) + 1.440357*Power(t3149,2) + 1.440357*Power(t3154,2);
  p_output1[63]=t3530;
  p_output1[64]=t3534;
  p_output1[65]=t3542;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=t3547;
  p_output1[87]=t3552;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t3322;
  p_output1[91]=t3489;
  p_output1[92]=t3530;
  p_output1[93]=1.440357*Power(t3263,2) + 1.440357*Power(t3293,2) + 1.440357*Power(t3320,2) + t2944*t3557 + t2760*t3563 + t3035*t3576;
  p_output1[94]=t2944*t3598 + t2760*t3606 + t3035*t3617 + t3619 + t3620 + t3621;
  p_output1[95]=t2760*t3626 + t2944*t3636 + t3035*t3641 + t3643 + t3646 + t3647;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=t2760*t3658 + t2944*t3662 + t3035*t3669 + t3673 + t3674 + t3675;
  p_output1[117]=-0.005777999698247839*t2760 + 2.9968860491339707e-6*t2944 - 0.002045999268242574*t3035 + t3682 + t3683 + t3684;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t3386;
  p_output1[121]=t3496;
  p_output1[122]=t3534;
  p_output1[123]=t3086*t3557 + t3055*t3563 + t3110*t3576 + t3619 + t3620 + t3621;
  p_output1[124]=1.440357*Power(t3344,2) + 1.440357*Power(t3372,2) + 1.440357*Power(t3384,2) + t3086*t3598 + t3055*t3606 + t3110*t3617;
  p_output1[125]=t3055*t3626 + t3086*t3636 + t3110*t3641 + t3717 + t3718 + t3719;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=t3055*t3658 + t3086*t3662 + t3110*t3669 + t3730 + t3731 + t3732;
  p_output1[147]=-0.005777999698247839*t3055 + 2.9968860491339707e-6*t3086 - 0.002045999268242574*t3110 + t3740 + t3741 + t3742;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t3422;
  p_output1[151]=t3503;
  p_output1[152]=t3542;
  p_output1[153]=t2855*t3557 + t2649*t3563 + t3002*t3576 + t3643 + t3646 + t3647;
  p_output1[154]=t2855*t3598 + t2649*t3606 + t3002*t3617 + t3717 + t3718 + t3719;
  p_output1[155]=1.440357*Power(t3398,2) + 1.440357*Power(t3407,2) + 1.440357*Power(t3420,2) + t2649*t3626 + t2855*t3636 + t3002*t3641;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=t2649*t3658 + t2855*t3662 + t3002*t3669 + t3765 + t3769 + t3770;
  p_output1[177]=-0.005777999698247839*t2649 + 2.9968860491339707e-6*t2855 - 0.002045999268242574*t3002 + t3773 + t3774 + t3775;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=0;
  p_output1[421]=0;
  p_output1[422]=0;
  p_output1[423]=0;
  p_output1[424]=0;
  p_output1[425]=0;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=t3462;
  p_output1[781]=t3509;
  p_output1[782]=t3547;
  p_output1[783]=t3576*t3654 + t3557*t3656 + t3673 + t3674 + t3675;
  p_output1[784]=t3617*t3654 + t3598*t3656 + t3730 + t3731 + t3732;
  p_output1[785]=t3641*t3654 + t3636*t3656 + t3765 + t3769 + t3770;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=1.440357*Power(t3437,2) + 1.440357*Power(t3447,2) + 1.440357*Power(t3459,2) + t3656*t3662 + t3654*t3669;
  p_output1[807]=-0.002045999268242574*t3654 + 2.9968860491339707e-6*t3656 + t3803 + t3804 + t3805;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=t3467;
  p_output1[811]=t3513;
  p_output1[812]=t3552;
  p_output1[813]=-4.610340000044122e-7*t3557 - 1.0000001112680001*t3563 + 4.610340000044122e-7*t3576 + t3682 + t3683 + t3684;
  p_output1[814]=-4.610340000044122e-7*t3598 - 1.0000001112680001*t3606 + 4.610340000044122e-7*t3617 + t3740 + t3741 + t3742;
  p_output1[815]=-1.0000001112680001*t3626 - 4.610340000044122e-7*t3636 + 4.610340000044122e-7*t3641 + t3773 + t3774 + t3775;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=-1.0000001112680001*t3658 - 4.610340000044122e-7*t3662 + 4.610340000044122e-7*t3669 + t3803 + t3804 + t3805;
  p_output1[837]=0.011293566696850728;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat_L23_digit.hh"

namespace SymFunction
{

void Mmat_L23_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
