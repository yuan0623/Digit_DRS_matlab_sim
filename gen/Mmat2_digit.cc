/*
 * Automatically Generated from Mathematica.
 * Mon 2 May 2022 22:30:42 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t6;
  double t16;
  double t19;
  double t14;
  double t25;
  double t26;
  double t27;
  double t24;
  double t9;
  double t44;
  double t17;
  double t20;
  double t21;
  double t50;
  double t22;
  double t29;
  double t30;
  double t34;
  double t35;
  double t36;
  double t33;
  double t37;
  double t38;
  double t57;
  double t58;
  double t59;
  double t66;
  double t70;
  double t71;
  double t95;
  double t96;
  double t97;
  double t98;
  double t99;
  double t100;
  double t101;
  double t102;
  double t103;
  double t105;
  double t106;
  double t107;
  double t104;
  double t108;
  double t109;
  double t111;
  double t112;
  double t113;
  double t115;
  double t116;
  double t117;
  double t148;
  double t135;
  double t128;
  double t123;
  double t118;
  double t174;
  double t178;
  double t47;
  double t51;
  double t54;
  double t56;
  double t60;
  double t62;
  double t63;
  double t64;
  double t74;
  double t75;
  double t76;
  double t78;
  double t79;
  double t80;
  double t81;
  double t82;
  double t84;
  double t85;
  double t87;
  double t90;
  double t91;
  double t92;
  double t110;
  double t114;
  double t119;
  double t120;
  double t121;
  double t122;
  double t124;
  double t125;
  double t126;
  double t129;
  double t130;
  double t131;
  double t132;
  double t133;
  double t134;
  double t136;
  double t137;
  double t138;
  double t140;
  double t142;
  double t143;
  double t144;
  double t145;
  double t146;
  double t147;
  double t149;
  double t150;
  double t151;
  double t154;
  double t155;
  double t156;
  double t157;
  double t158;
  double t159;
  double t160;
  double t161;
  double t162;
  double t164;
  double t165;
  double t166;
  double t167;
  double t168;
  double t169;
  double t171;
  double t172;
  double t175;
  double t176;
  double t177;
  double t179;
  double t180;
  double t181;
  double t182;
  double t185;
  double t186;
  double t187;
  double t188;
  double t189;
  double t190;
  double t191;
  double t83;
  double t88;
  double t93;
  double t94;
  double t206;
  double t207;
  double t208;
  double t209;
  double t127;
  double t139;
  double t152;
  double t153;
  double t210;
  double t211;
  double t212;
  double t213;
  double t232;
  double t233;
  double t234;
  double t235;
  double t249;
  double t250;
  double t251;
  double t163;
  double t173;
  double t183;
  double t184;
  double t214;
  double t215;
  double t216;
  double t217;
  double t236;
  double t237;
  double t238;
  double t239;
  double t252;
  double t269;
  double t285;
  double t286;
  double t258;
  double t259;
  double t260;
  double t261;
  double t263;
  double t264;
  double t265;
  double t266;
  double t275;
  double t276;
  double t277;
  double t278;
  double t270;
  double t271;
  double t272;
  double t273;
  double t280;
  double t281;
  double t282;
  double t283;
  double t288;
  double t289;
  double t290;
  double t292;
  double t293;
  double t294;
  double t297;
  double t298;
  double t299;
  double t192;
  double t193;
  double t194;
  double t195;
  double t218;
  double t219;
  double t220;
  double t221;
  double t240;
  double t241;
  double t242;
  double t243;
  double t296;
  double t301;
  double t302;
  double t322;
  double t323;
  double t325;
  double t196;
  double t197;
  double t198;
  double t222;
  double t223;
  double t224;
  double t244;
  double t245;
  double t246;
  double t304;
  double t305;
  double t306;
  double t328;
  double t329;
  double t330;
  double t346;
  double t347;
  double t348;
  t6 = Cos(var1[4]);
  t16 = Cos(var1[6]);
  t19 = Sin(var1[6]);
  t14 = Sin(var1[4]);
  t25 = 0.930418*t16;
  t26 = 0.366501*t19;
  t27 = t25 + t26;
  t24 = Sin(var1[5]);
  t9 = Cos(var1[5]);
  t44 = Sin(var1[3]);
  t17 = 0.366501*t16;
  t20 = -0.930418*t19;
  t21 = t17 + t20;
  t50 = Cos(var1[3]);
  t22 = t14*t21;
  t29 = -1.*t6*t24*t27;
  t30 = t22 + t29;
  t34 = -0.366501*t16;
  t35 = 0.930418*t19;
  t36 = t34 + t35;
  t33 = t14*t27;
  t37 = -1.*t6*t24*t36;
  t38 = t33 + t37;
  t57 = t6*t21;
  t58 = t14*t24*t27;
  t59 = t57 + t58;
  t66 = t6*t27;
  t70 = t14*t24*t36;
  t71 = t66 + t70;
  t95 = -0.032435*t9;
  t96 = -1.*t16;
  t97 = 1. + t96;
  t98 = 0.091*t97;
  t99 = 0.091948*t16;
  t100 = -0.001741*t19;
  t101 = t98 + t99 + t100;
  t102 = -1.*t24*t101;
  t103 = t95 + t102;
  t105 = -0.001741*t16;
  t106 = -0.0009480000000000044*t19;
  t107 = t105 + t106;
  t104 = t6*t103;
  t108 = t14*t107;
  t109 = t104 + t108;
  t111 = -1.*t14*t103;
  t112 = t6*t107;
  t113 = t111 + t112;
  t115 = -0.032435*t24;
  t116 = t9*t101;
  t117 = t115 + t116;
  t148 = -1.*t9*t117*t27;
  t135 = t9*t117*t36;
  t128 = t24*t117;
  t123 = -1.*t9*t117*t36;
  t118 = t9*t117*t27;
  t174 = -1.*t107*t27;
  t178 = t21*t107;
  t47 = -1.*t9*t44*t14;
  t51 = -1.*t50*t24;
  t54 = t47 + t51;
  t56 = -0.915088*t6*t9*t54;
  t60 = -1.*t44*t59;
  t62 = t50*t9*t27;
  t63 = t60 + t62;
  t64 = 0.915088*t63*t30;
  t74 = -1.*t44*t71;
  t75 = t50*t9*t36;
  t76 = t74 + t75;
  t78 = 0.915088*t76*t38;
  t79 = t56 + t64 + t78;
  t80 = t50*t9*t14;
  t81 = -1.*t44*t24;
  t82 = t80 + t81;
  t84 = t50*t59;
  t85 = t9*t44*t27;
  t87 = t84 + t85;
  t90 = t50*t71;
  t91 = t9*t44*t36;
  t92 = t90 + t91;
  t110 = t109*t30;
  t114 = t113*t59;
  t119 = t110 + t114 + t118;
  t120 = t119*t38;
  t121 = -1.*t109*t38;
  t122 = -1.*t113*t71;
  t124 = t121 + t122 + t123;
  t125 = t30*t124;
  t126 = t120 + t125;
  t129 = -1.*t9*t14*t113;
  t130 = t6*t9*t109;
  t131 = t128 + t129 + t130;
  t132 = t131*t38;
  t133 = t109*t38;
  t134 = t113*t71;
  t136 = t133 + t134 + t135;
  t137 = -1.*t6*t9*t136;
  t138 = t132 + t137;
  t140 = -1.*t24*t117;
  t142 = t9*t14*t113;
  t143 = -1.*t6*t9*t109;
  t144 = t140 + t142 + t143;
  t145 = t144*t30;
  t146 = -1.*t109*t30;
  t147 = -1.*t113*t59;
  t149 = t146 + t147 + t148;
  t150 = -1.*t6*t9*t149;
  t151 = t145 + t150;
  t154 = -1.*t21*t107;
  t155 = t24*t103*t27;
  t156 = t154 + t148 + t155;
  t157 = -1.*t24*t156;
  t158 = -1.*t24*t117;
  t159 = -1.*t9*t103;
  t160 = t158 + t159;
  t161 = t9*t160*t27;
  t162 = t157 + t161;
  t164 = t107*t27;
  t165 = -1.*t24*t103*t36;
  t166 = t164 + t135 + t165;
  t167 = -1.*t24*t166;
  t168 = t9*t103;
  t169 = t128 + t168;
  t171 = t9*t169*t36;
  t172 = t167 + t171;
  t175 = t24*t103*t36;
  t176 = t174 + t123 + t175;
  t177 = t9*t176*t27;
  t179 = -1.*t24*t103*t27;
  t180 = t178 + t118 + t179;
  t181 = t9*t180*t36;
  t182 = t177 + t181;
  t185 = -1.*t101*t36;
  t186 = t174 + t185;
  t187 = t186*t21;
  t188 = t101*t27;
  t189 = t178 + t188;
  t190 = t189*t27;
  t191 = t187 + t190;
  t83 = -0.915088*t6*t9*t82;
  t88 = 0.915088*t87*t30;
  t93 = 0.915088*t92*t38;
  t94 = t83 + t88 + t93;
  t206 = 0.915088*t54*t82;
  t207 = 0.915088*t63*t87;
  t208 = 0.915088*t76*t92;
  t209 = t206 + t207 + t208;
  t127 = -0.915088*t6*t9*t126;
  t139 = 0.915088*t138*t30;
  t152 = 0.915088*t151*t38;
  t153 = t127 + t139 + t152;
  t210 = 0.915088*t54*t126;
  t211 = 0.915088*t138*t63;
  t212 = 0.915088*t151*t76;
  t213 = t210 + t211 + t212;
  t232 = 0.915088*t82*t126;
  t233 = 0.915088*t138*t87;
  t234 = 0.915088*t151*t92;
  t235 = t232 + t233 + t234;
  t249 = -0.000766*t6*t9;
  t250 = -4.e-6*t30;
  t251 = 0.000013*t38;
  t163 = 0.915088*t162*t38;
  t173 = 0.915088*t30*t172;
  t183 = -0.915088*t6*t9*t182;
  t184 = t163 + t173 + t183;
  t214 = 0.915088*t162*t76;
  t215 = 0.915088*t63*t172;
  t216 = 0.915088*t54*t182;
  t217 = t214 + t215 + t216;
  t236 = 0.915088*t162*t92;
  t237 = 0.915088*t87*t172;
  t238 = 0.915088*t82*t182;
  t239 = t236 + t237 + t238;
  t252 = t249 + t250 + t251;
  t269 = 0.915088*t151*t162;
  t285 = 0.915088*t138*t172;
  t286 = 0.915088*t126*t182;
  t258 = 4.e-6*t6*t9;
  t259 = 0.001148*t30;
  t260 = -3.e-6*t38;
  t261 = t258 + t259 + t260;
  t263 = -0.000013*t6*t9;
  t264 = -3.e-6*t30;
  t265 = 0.001017*t38;
  t266 = t263 + t264 + t265;
  t275 = -0.000766*t24;
  t276 = -4.e-6*t9*t27;
  t277 = 0.000013*t9*t36;
  t278 = t275 + t276 + t277;
  t270 = 4.e-6*t24;
  t271 = 0.001148*t9*t27;
  t272 = -3.e-6*t9*t36;
  t273 = t270 + t271 + t272;
  t280 = -0.000013*t24;
  t281 = -3.e-6*t9*t27;
  t282 = 0.001017*t9*t36;
  t283 = t280 + t281 + t282;
  t288 = -4.e-6*t21;
  t289 = 0.000013*t27;
  t290 = t288 + t289;
  t292 = 0.001148*t21;
  t293 = -3.e-6*t27;
  t294 = t292 + t293;
  t297 = -3.e-6*t21;
  t298 = 0.001017*t27;
  t299 = t297 + t298;
  t192 = -0.915088*t6*t9*t191;
  t193 = 0.02968087928*t38*t21;
  t194 = -0.02968087928*t30*t27;
  t195 = t192 + t193 + t194;
  t218 = 0.915088*t54*t191;
  t219 = 0.02968087928*t76*t21;
  t220 = -0.02968087928*t63*t27;
  t221 = t218 + t219 + t220;
  t240 = 0.915088*t82*t191;
  t241 = 0.02968087928*t92*t21;
  t242 = -0.02968087928*t87*t27;
  t243 = t240 + t241 + t242;
  t296 = 0.915088*t126*t191;
  t301 = 0.02968087928*t151*t21;
  t302 = -0.02968087928*t138*t27;
  t322 = 0.915088*t191*t182;
  t323 = 0.02968087928*t162*t21;
  t325 = -0.02968087928*t172*t27;
  t196 = -0.0018002532501503663*t30;
  t197 = -0.00022324305935101784*t38;
  t198 = t196 + t197;
  t222 = -0.0018002532501503663*t63;
  t223 = -0.00022324305935101784*t76;
  t224 = t222 + t223;
  t244 = -0.0018002532501503663*t87;
  t245 = -0.00022324305935101784*t92;
  t246 = t244 + t245;
  t304 = -0.00022324305935101784*t151;
  t305 = -0.0018002532501503663*t138;
  t306 = t249 + t304 + t305 + t250 + t251;
  t328 = -0.00022324305935101784*t162;
  t329 = -0.0018002532501503663*t172;
  t330 = t275 + t328 + t329 + t276 + t277;
  t346 = -0.000011240888630050262*t21;
  t347 = 0.00007139121416862712*t27;
  t348 = t346 + t347;
  p_output1[0]=0.915088*Power(t30,2) + 0.915088*Power(t38,2) + 0.915088*Power(t6,2)*Power(t9,2);
  p_output1[1]=t79;
  p_output1[2]=t94;
  p_output1[3]=t153;
  p_output1[4]=t184;
  p_output1[5]=t195;
  p_output1[6]=t198;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t79;
  p_output1[31]=0.915088*Power(t54,2) + 0.915088*Power(t63,2) + 0.915088*Power(t76,2);
  p_output1[32]=t209;
  p_output1[33]=t213;
  p_output1[34]=t217;
  p_output1[35]=t221;
  p_output1[36]=t224;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t94;
  p_output1[61]=t209;
  p_output1[62]=0.915088*Power(t82,2) + 0.915088*Power(t87,2) + 0.915088*Power(t92,2);
  p_output1[63]=t235;
  p_output1[64]=t239;
  p_output1[65]=t243;
  p_output1[66]=t246;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t153;
  p_output1[91]=t213;
  p_output1[92]=t235;
  p_output1[93]=0.915088*Power(t126,2) + 0.915088*Power(t138,2) + 0.915088*Power(t151,2) + t261*t30 + t266*t38 - 1.*t252*t6*t9;
  p_output1[94]=t269 + t285 + t286 + t273*t30 + t283*t38 - 1.*t278*t6*t9;
  p_output1[95]=t296 + t294*t30 + t301 + t302 + t299*t38 - 1.*t290*t6*t9;
  p_output1[96]=t306;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t184;
  p_output1[121]=t217;
  p_output1[122]=t239;
  p_output1[123]=-1.*t24*t252 + t269 + t285 + t286 + t261*t27*t9 + t266*t36*t9;
  p_output1[124]=0.915088*Power(t162,2) + 0.915088*Power(t172,2) + 0.915088*Power(t182,2) - 1.*t24*t278 + t27*t273*t9 + t283*t36*t9;
  p_output1[125]=-1.*t24*t290 + t322 + t323 + t325 + t27*t294*t9 + t299*t36*t9;
  p_output1[126]=t330;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t195;
  p_output1[151]=t221;
  p_output1[152]=t243;
  p_output1[153]=t21*t261 + t266*t27 + t296 + t301 + t302;
  p_output1[154]=t21*t273 + t27*t283 + t322 + t323 + t325;
  p_output1[155]=0.915088*Power(t191,2) + 0.0009626993194468*Power(t21,2) + 0.0009626993194468*Power(t27,2) + t21*t294 + t27*t299;
  p_output1[156]=t348;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=t198;
  p_output1[181]=t224;
  p_output1[182]=t246;
  p_output1[183]=t306;
  p_output1[184]=t330;
  p_output1[185]=t348;
  p_output1[186]=0.0007695961013894023;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=0;
  p_output1[421]=0;
  p_output1[422]=0;
  p_output1[423]=0;
  p_output1[424]=0;
  p_output1[425]=0;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat2_digit.hh"

namespace SymFunction
{

void Mmat2_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
