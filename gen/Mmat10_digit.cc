/*
 * Automatically Generated from Mathematica.
 * Mon 2 May 2022 22:34:08 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t577;
  double t648;
  double t662;
  double t682;
  double t688;
  double t713;
  double t676;
  double t737;
  double t612;
  double t652;
  double t663;
  double t672;
  double t678;
  double t740;
  double t741;
  double t833;
  double t815;
  double t760;
  double t761;
  double t770;
  double t789;
  double t791;
  double t798;
  double t874;
  double t877;
  double t883;
  double t917;
  double t921;
  double t933;
  double t1014;
  double t1015;
  double t1016;
  double t1023;
  double t1025;
  double t1027;
  double t1052;
  double t1053;
  double t1059;
  double t1060;
  double t1066;
  double t1083;
  double t1086;
  double t1030;
  double t1042;
  double t1048;
  double t1061;
  double t1088;
  double t1096;
  double t1102;
  double t1103;
  double t1107;
  double t1124;
  double t1182;
  double t1188;
  double t1152;
  double t1163;
  double t1259;
  double t1252;
  double t829;
  double t838;
  double t851;
  double t853;
  double t856;
  double t890;
  double t899;
  double t905;
  double t916;
  double t934;
  double t935;
  double t945;
  double t951;
  double t957;
  double t965;
  double t969;
  double t975;
  double t979;
  double t980;
  double t985;
  double t998;
  double t1008;
  double t1050;
  double t1099;
  double t1112;
  double t1119;
  double t1122;
  double t1128;
  double t1137;
  double t1139;
  double t1141;
  double t1145;
  double t1154;
  double t1156;
  double t1157;
  double t1161;
  double t1166;
  double t1168;
  double t1169;
  double t1176;
  double t1178;
  double t1183;
  double t1185;
  double t1186;
  double t1187;
  double t1190;
  double t1192;
  double t1193;
  double t1200;
  double t1201;
  double t1211;
  double t1212;
  double t1214;
  double t1222;
  double t1223;
  double t1224;
  double t1225;
  double t1228;
  double t1229;
  double t1231;
  double t1237;
  double t1239;
  double t1240;
  double t1242;
  double t1244;
  double t1246;
  double t1247;
  double t1255;
  double t1257;
  double t1258;
  double t1260;
  double t1263;
  double t1265;
  double t1266;
  double t1273;
  double t1274;
  double t1278;
  double t1280;
  double t1283;
  double t1285;
  double t1286;
  double t971;
  double t983;
  double t1009;
  double t1011;
  double t1321;
  double t1323;
  double t1325;
  double t1327;
  double t1151;
  double t1179;
  double t1207;
  double t1208;
  double t1329;
  double t1332;
  double t1337;
  double t1338;
  double t1380;
  double t1381;
  double t1386;
  double t1388;
  double t1412;
  double t1414;
  double t1415;
  double t1230;
  double t1248;
  double t1267;
  double t1269;
  double t1339;
  double t1340;
  double t1343;
  double t1345;
  double t1389;
  double t1390;
  double t1394;
  double t1396;
  double t1416;
  double t1421;
  double t1424;
  double t1425;
  double t1426;
  double t1435;
  double t1436;
  double t1439;
  double t1440;
  double t1500;
  double t1506;
  double t1507;
  double t1475;
  double t1476;
  double t1477;
  double t1479;
  double t1484;
  double t1485;
  double t1486;
  double t1493;
  double t1458;
  double t1459;
  double t1464;
  double t1466;
  double t1519;
  double t1520;
  double t1521;
  double t1523;
  double t1524;
  double t1525;
  double t1515;
  double t1516;
  double t1517;
  double t1287;
  double t1289;
  double t1290;
  double t1291;
  double t1346;
  double t1347;
  double t1348;
  double t1351;
  double t1397;
  double t1404;
  double t1405;
  double t1407;
  double t1530;
  double t1531;
  double t1532;
  double t1557;
  double t1558;
  double t1559;
  double t1300;
  double t1303;
  double t1304;
  double t1353;
  double t1355;
  double t1356;
  double t1409;
  double t1410;
  double t1411;
  double t1534;
  double t1535;
  double t1536;
  double t1562;
  double t1563;
  double t1564;
  double t1584;
  double t1588;
  double t1590;
  t577 = Cos(var1[4]);
  t648 = Cos(var1[14]);
  t662 = Sin(var1[14]);
  t682 = 0.984808*t648;
  t688 = -0.173648*t662;
  t713 = t682 + t688;
  t676 = Sin(var1[4]);
  t737 = Sin(var1[5]);
  t612 = Cos(var1[5]);
  t652 = -0.173648*t648;
  t663 = -0.984808*t662;
  t672 = t652 + t663;
  t678 = t672*t676;
  t740 = -1.*t577*t713*t737;
  t741 = t678 + t740;
  t833 = Cos(var1[3]);
  t815 = Sin(var1[3]);
  t760 = t713*t676;
  t761 = 0.173648*t648;
  t770 = 0.984808*t662;
  t789 = t761 + t770;
  t791 = -1.*t577*t789*t737;
  t798 = t760 + t791;
  t874 = t577*t672;
  t877 = t713*t676*t737;
  t883 = t874 + t877;
  t917 = t577*t713;
  t921 = t789*t676*t737;
  t933 = t917 + t921;
  t1014 = -1.*t648;
  t1015 = 1. + t1014;
  t1016 = 0.12*t1015;
  t1023 = 0.116892*t648;
  t1025 = 0.0005569999999999742*t662;
  t1027 = t1016 + t1023 + t1025;
  t1052 = 0.4*t1015;
  t1053 = 0.400557*t648;
  t1059 = 0.0031079999999999997*t662;
  t1060 = t1052 + t1053 + t1059;
  t1066 = -0.024405*t612;
  t1083 = -1.*t1027*t737;
  t1086 = t1066 + t1083;
  t1030 = t612*t1027;
  t1042 = -0.024405*t737;
  t1048 = t1030 + t1042;
  t1061 = t1060*t676;
  t1088 = t577*t1086;
  t1096 = t1061 + t1088;
  t1102 = t577*t1060;
  t1103 = -1.*t676*t1086;
  t1107 = t1102 + t1103;
  t1124 = -1.*t612*t713*t1048;
  t1182 = t1048*t737;
  t1188 = t612*t789*t1048;
  t1152 = t612*t713*t1048;
  t1163 = -1.*t612*t789*t1048;
  t1259 = -1.*t713*t1060;
  t1252 = t672*t1060;
  t829 = -1.*t612*t815*t676;
  t838 = -1.*t833*t737;
  t851 = t829 + t838;
  t853 = -0.535396*t577*t612*t851;
  t856 = t833*t612*t713;
  t890 = -1.*t815*t883;
  t899 = t856 + t890;
  t905 = 0.535396*t741*t899;
  t916 = t833*t612*t789;
  t934 = -1.*t815*t933;
  t935 = t916 + t934;
  t945 = 0.535396*t798*t935;
  t951 = t853 + t905 + t945;
  t957 = t833*t612*t676;
  t965 = -1.*t815*t737;
  t969 = t957 + t965;
  t975 = t612*t713*t815;
  t979 = t833*t883;
  t980 = t975 + t979;
  t985 = t612*t789*t815;
  t998 = t833*t933;
  t1008 = t985 + t998;
  t1050 = -1.*t1048*t737;
  t1099 = -1.*t577*t612*t1096;
  t1112 = t612*t676*t1107;
  t1119 = t1050 + t1099 + t1112;
  t1122 = t741*t1119;
  t1128 = -1.*t741*t1096;
  t1137 = -1.*t883*t1107;
  t1139 = t1124 + t1128 + t1137;
  t1141 = -1.*t577*t612*t1139;
  t1145 = t1122 + t1141;
  t1154 = t741*t1096;
  t1156 = t883*t1107;
  t1157 = t1152 + t1154 + t1156;
  t1161 = t798*t1157;
  t1166 = -1.*t798*t1096;
  t1168 = -1.*t933*t1107;
  t1169 = t1163 + t1166 + t1168;
  t1176 = t741*t1169;
  t1178 = t1161 + t1176;
  t1183 = t577*t612*t1096;
  t1185 = -1.*t612*t676*t1107;
  t1186 = t1182 + t1183 + t1185;
  t1187 = t798*t1186;
  t1190 = t798*t1096;
  t1192 = t933*t1107;
  t1193 = t1188 + t1190 + t1192;
  t1200 = -1.*t577*t612*t1193;
  t1201 = t1187 + t1200;
  t1211 = -1.*t1048*t737;
  t1212 = -1.*t612*t1086;
  t1214 = t1211 + t1212;
  t1222 = t612*t713*t1214;
  t1223 = -1.*t672*t1060;
  t1224 = t713*t737*t1086;
  t1225 = t1223 + t1124 + t1224;
  t1228 = -1.*t737*t1225;
  t1229 = t1222 + t1228;
  t1231 = t612*t1086;
  t1237 = t1182 + t1231;
  t1239 = t612*t789*t1237;
  t1240 = t713*t1060;
  t1242 = -1.*t789*t737*t1086;
  t1244 = t1240 + t1188 + t1242;
  t1246 = -1.*t737*t1244;
  t1247 = t1239 + t1246;
  t1255 = -1.*t713*t737*t1086;
  t1257 = t1252 + t1152 + t1255;
  t1258 = t612*t789*t1257;
  t1260 = t789*t737*t1086;
  t1263 = t1259 + t1163 + t1260;
  t1265 = t612*t713*t1263;
  t1266 = t1258 + t1265;
  t1273 = -1.*t1027*t789;
  t1274 = t1259 + t1273;
  t1278 = t1274*t672;
  t1280 = t713*t1027;
  t1283 = t1280 + t1252;
  t1285 = t1283*t713;
  t1286 = t1278 + t1285;
  t971 = -0.535396*t577*t612*t969;
  t983 = 0.535396*t741*t980;
  t1009 = 0.535396*t798*t1008;
  t1011 = t971 + t983 + t1009;
  t1321 = 0.535396*t851*t969;
  t1323 = 0.535396*t980*t899;
  t1325 = 0.535396*t1008*t935;
  t1327 = t1321 + t1323 + t1325;
  t1151 = 0.535396*t798*t1145;
  t1179 = -0.535396*t577*t612*t1178;
  t1207 = 0.535396*t741*t1201;
  t1208 = t1151 + t1179 + t1207;
  t1329 = 0.535396*t935*t1145;
  t1332 = 0.535396*t851*t1178;
  t1337 = 0.535396*t899*t1201;
  t1338 = t1329 + t1332 + t1337;
  t1380 = 0.535396*t1008*t1145;
  t1381 = 0.535396*t969*t1178;
  t1386 = 0.535396*t980*t1201;
  t1388 = t1380 + t1381 + t1386;
  t1412 = -0.000298*t577*t612;
  t1414 = 0.000035*t741;
  t1415 = 0.000012*t798;
  t1230 = 0.535396*t798*t1229;
  t1248 = 0.535396*t741*t1247;
  t1267 = -0.535396*t577*t612*t1266;
  t1269 = t1230 + t1248 + t1267;
  t1339 = 0.535396*t935*t1229;
  t1340 = 0.535396*t899*t1247;
  t1343 = 0.535396*t851*t1266;
  t1345 = t1339 + t1340 + t1343;
  t1389 = 0.535396*t1008*t1229;
  t1390 = 0.535396*t980*t1247;
  t1394 = 0.535396*t969*t1266;
  t1396 = t1389 + t1390 + t1394;
  t1416 = t1412 + t1414 + t1415;
  t1421 = -0.000035*t577*t612;
  t1424 = 0.00075*t741;
  t1425 = 0.000014*t798;
  t1426 = t1421 + t1424 + t1425;
  t1435 = -0.000012*t577*t612;
  t1436 = 0.000014*t741;
  t1439 = 0.000704*t798;
  t1440 = t1435 + t1436 + t1439;
  t1500 = 0.535396*t1229*t1145;
  t1506 = 0.535396*t1266*t1178;
  t1507 = 0.535396*t1247*t1201;
  t1475 = 0.00075*t612*t713;
  t1476 = 0.000014*t612*t789;
  t1477 = -0.000035*t737;
  t1479 = t1475 + t1476 + t1477;
  t1484 = 0.000014*t612*t713;
  t1485 = 0.000704*t612*t789;
  t1486 = -0.000012*t737;
  t1493 = t1484 + t1485 + t1486;
  t1458 = 0.000035*t612*t713;
  t1459 = 0.000012*t612*t789;
  t1464 = -0.000298*t737;
  t1466 = t1458 + t1459 + t1464;
  t1519 = 0.00075*t672;
  t1520 = 0.000014*t713;
  t1521 = t1519 + t1520;
  t1523 = 0.000014*t672;
  t1524 = 0.000704*t713;
  t1525 = t1523 + t1524;
  t1515 = 0.000035*t672;
  t1516 = 0.000012*t713;
  t1517 = t1515 + t1516;
  t1287 = -0.535396*t577*t612*t1286;
  t1289 = -0.01306633938*t713*t741;
  t1290 = 0.01306633938*t672*t798;
  t1291 = t1287 + t1289 + t1290;
  t1346 = 0.535396*t1286*t851;
  t1347 = -0.01306633938*t713*t899;
  t1348 = 0.01306633938*t672*t935;
  t1351 = t1346 + t1347 + t1348;
  t1397 = 0.535396*t1286*t969;
  t1404 = -0.01306633938*t713*t980;
  t1405 = 0.01306633938*t672*t1008;
  t1407 = t1397 + t1404 + t1405;
  t1530 = 0.01306633938*t672*t1145;
  t1531 = 0.535396*t1286*t1178;
  t1532 = -0.01306633938*t713*t1201;
  t1557 = 0.01306633938*t672*t1229;
  t1558 = -0.01306633938*t713*t1247;
  t1559 = 0.535396*t1286*t1266;
  t1300 = 4.732939188496741e-6*t741;
  t1303 = 0.0016905156540591966*t798;
  t1304 = t1300 + t1303;
  t1353 = 4.732939188496741e-6*t899;
  t1355 = 0.0016905156540591966*t935;
  t1356 = t1353 + t1355;
  t1409 = 4.732939188496741e-6*t980;
  t1410 = 0.0016905156540591966*t1008;
  t1411 = t1409 + t1410;
  t1534 = 0.0016905156540591966*t1145;
  t1535 = 4.732939188496741e-6*t1201;
  t1536 = t1412 + t1414 + t1415 + t1534 + t1535;
  t1562 = 0.0016905156540591966*t1229;
  t1563 = 4.732939188496741e-6*t1247;
  t1564 = t1458 + t1459 + t1464 + t1562 + t1563;
  t1584 = 0.0000762570345373147*t672;
  t1588 = 0.000011884492619104737*t713;
  t1590 = t1584 + t1588;
  p_output1[0]=0.535396*Power(t577,2)*Power(t612,2) + 0.535396*Power(t741,2) + 0.535396*Power(t798,2);
  p_output1[1]=t951;
  p_output1[2]=t1011;
  p_output1[3]=t1208;
  p_output1[4]=t1269;
  p_output1[5]=t1291;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=t1304;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t951;
  p_output1[31]=0.535396*Power(t851,2) + 0.535396*Power(t899,2) + 0.535396*Power(t935,2);
  p_output1[32]=t1327;
  p_output1[33]=t1338;
  p_output1[34]=t1345;
  p_output1[35]=t1351;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=t1356;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t1011;
  p_output1[61]=t1327;
  p_output1[62]=0.535396*Power(t1008,2) + 0.535396*Power(t969,2) + 0.535396*Power(t980,2);
  p_output1[63]=t1388;
  p_output1[64]=t1396;
  p_output1[65]=t1407;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=t1411;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t1208;
  p_output1[91]=t1338;
  p_output1[92]=t1388;
  p_output1[93]=0.535396*Power(t1145,2) + 0.535396*Power(t1178,2) + 0.535396*Power(t1201,2) - 1.*t1416*t577*t612 + t1426*t741 + t1440*t798;
  p_output1[94]=t1500 + t1506 + t1507 - 1.*t1466*t577*t612 + t1479*t741 + t1493*t798;
  p_output1[95]=t1530 + t1531 + t1532 - 1.*t1517*t577*t612 + t1521*t741 + t1525*t798;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=t1536;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=t1269;
  p_output1[121]=t1345;
  p_output1[122]=t1396;
  p_output1[123]=t1500 + t1506 + t1507 + t1426*t612*t713 - 1.*t1416*t737 + t1440*t612*t789;
  p_output1[124]=0.535396*Power(t1229,2) + 0.535396*Power(t1247,2) + 0.535396*Power(t1266,2) + t1479*t612*t713 - 1.*t1466*t737 + t1493*t612*t789;
  p_output1[125]=t1557 + t1558 + t1559 + t1521*t612*t713 - 1.*t1517*t737 + t1525*t612*t789;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=t1564;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=t1291;
  p_output1[151]=t1351;
  p_output1[152]=t1407;
  p_output1[153]=t1530 + t1531 + t1532 + t1426*t672 + t1440*t713;
  p_output1[154]=t1557 + t1558 + t1559 + t1479*t672 + t1493*t713;
  p_output1[155]=0.535396*Power(t1286,2) + t1521*t672 + 0.0003188840125689*Power(t672,2) + t1525*t713 + 0.0003188840125689*Power(t713,2);
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=t1590;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
  p_output1[396]=0;
  p_output1[397]=0;
  p_output1[398]=0;
  p_output1[399]=0;
  p_output1[400]=0;
  p_output1[401]=0;
  p_output1[402]=0;
  p_output1[403]=0;
  p_output1[404]=0;
  p_output1[405]=0;
  p_output1[406]=0;
  p_output1[407]=0;
  p_output1[408]=0;
  p_output1[409]=0;
  p_output1[410]=0;
  p_output1[411]=0;
  p_output1[412]=0;
  p_output1[413]=0;
  p_output1[414]=0;
  p_output1[415]=0;
  p_output1[416]=0;
  p_output1[417]=0;
  p_output1[418]=0;
  p_output1[419]=0;
  p_output1[420]=t1304;
  p_output1[421]=t1356;
  p_output1[422]=t1411;
  p_output1[423]=t1536;
  p_output1[424]=t1564;
  p_output1[425]=t1590;
  p_output1[426]=0;
  p_output1[427]=0;
  p_output1[428]=0;
  p_output1[429]=0;
  p_output1[430]=0;
  p_output1[431]=0;
  p_output1[432]=0;
  p_output1[433]=0;
  p_output1[434]=0.0003033378538078965;
  p_output1[435]=0;
  p_output1[436]=0;
  p_output1[437]=0;
  p_output1[438]=0;
  p_output1[439]=0;
  p_output1[440]=0;
  p_output1[441]=0;
  p_output1[442]=0;
  p_output1[443]=0;
  p_output1[444]=0;
  p_output1[445]=0;
  p_output1[446]=0;
  p_output1[447]=0;
  p_output1[448]=0;
  p_output1[449]=0;
  p_output1[450]=0;
  p_output1[451]=0;
  p_output1[452]=0;
  p_output1[453]=0;
  p_output1[454]=0;
  p_output1[455]=0;
  p_output1[456]=0;
  p_output1[457]=0;
  p_output1[458]=0;
  p_output1[459]=0;
  p_output1[460]=0;
  p_output1[461]=0;
  p_output1[462]=0;
  p_output1[463]=0;
  p_output1[464]=0;
  p_output1[465]=0;
  p_output1[466]=0;
  p_output1[467]=0;
  p_output1[468]=0;
  p_output1[469]=0;
  p_output1[470]=0;
  p_output1[471]=0;
  p_output1[472]=0;
  p_output1[473]=0;
  p_output1[474]=0;
  p_output1[475]=0;
  p_output1[476]=0;
  p_output1[477]=0;
  p_output1[478]=0;
  p_output1[479]=0;
  p_output1[480]=0;
  p_output1[481]=0;
  p_output1[482]=0;
  p_output1[483]=0;
  p_output1[484]=0;
  p_output1[485]=0;
  p_output1[486]=0;
  p_output1[487]=0;
  p_output1[488]=0;
  p_output1[489]=0;
  p_output1[490]=0;
  p_output1[491]=0;
  p_output1[492]=0;
  p_output1[493]=0;
  p_output1[494]=0;
  p_output1[495]=0;
  p_output1[496]=0;
  p_output1[497]=0;
  p_output1[498]=0;
  p_output1[499]=0;
  p_output1[500]=0;
  p_output1[501]=0;
  p_output1[502]=0;
  p_output1[503]=0;
  p_output1[504]=0;
  p_output1[505]=0;
  p_output1[506]=0;
  p_output1[507]=0;
  p_output1[508]=0;
  p_output1[509]=0;
  p_output1[510]=0;
  p_output1[511]=0;
  p_output1[512]=0;
  p_output1[513]=0;
  p_output1[514]=0;
  p_output1[515]=0;
  p_output1[516]=0;
  p_output1[517]=0;
  p_output1[518]=0;
  p_output1[519]=0;
  p_output1[520]=0;
  p_output1[521]=0;
  p_output1[522]=0;
  p_output1[523]=0;
  p_output1[524]=0;
  p_output1[525]=0;
  p_output1[526]=0;
  p_output1[527]=0;
  p_output1[528]=0;
  p_output1[529]=0;
  p_output1[530]=0;
  p_output1[531]=0;
  p_output1[532]=0;
  p_output1[533]=0;
  p_output1[534]=0;
  p_output1[535]=0;
  p_output1[536]=0;
  p_output1[537]=0;
  p_output1[538]=0;
  p_output1[539]=0;
  p_output1[540]=0;
  p_output1[541]=0;
  p_output1[542]=0;
  p_output1[543]=0;
  p_output1[544]=0;
  p_output1[545]=0;
  p_output1[546]=0;
  p_output1[547]=0;
  p_output1[548]=0;
  p_output1[549]=0;
  p_output1[550]=0;
  p_output1[551]=0;
  p_output1[552]=0;
  p_output1[553]=0;
  p_output1[554]=0;
  p_output1[555]=0;
  p_output1[556]=0;
  p_output1[557]=0;
  p_output1[558]=0;
  p_output1[559]=0;
  p_output1[560]=0;
  p_output1[561]=0;
  p_output1[562]=0;
  p_output1[563]=0;
  p_output1[564]=0;
  p_output1[565]=0;
  p_output1[566]=0;
  p_output1[567]=0;
  p_output1[568]=0;
  p_output1[569]=0;
  p_output1[570]=0;
  p_output1[571]=0;
  p_output1[572]=0;
  p_output1[573]=0;
  p_output1[574]=0;
  p_output1[575]=0;
  p_output1[576]=0;
  p_output1[577]=0;
  p_output1[578]=0;
  p_output1[579]=0;
  p_output1[580]=0;
  p_output1[581]=0;
  p_output1[582]=0;
  p_output1[583]=0;
  p_output1[584]=0;
  p_output1[585]=0;
  p_output1[586]=0;
  p_output1[587]=0;
  p_output1[588]=0;
  p_output1[589]=0;
  p_output1[590]=0;
  p_output1[591]=0;
  p_output1[592]=0;
  p_output1[593]=0;
  p_output1[594]=0;
  p_output1[595]=0;
  p_output1[596]=0;
  p_output1[597]=0;
  p_output1[598]=0;
  p_output1[599]=0;
  p_output1[600]=0;
  p_output1[601]=0;
  p_output1[602]=0;
  p_output1[603]=0;
  p_output1[604]=0;
  p_output1[605]=0;
  p_output1[606]=0;
  p_output1[607]=0;
  p_output1[608]=0;
  p_output1[609]=0;
  p_output1[610]=0;
  p_output1[611]=0;
  p_output1[612]=0;
  p_output1[613]=0;
  p_output1[614]=0;
  p_output1[615]=0;
  p_output1[616]=0;
  p_output1[617]=0;
  p_output1[618]=0;
  p_output1[619]=0;
  p_output1[620]=0;
  p_output1[621]=0;
  p_output1[622]=0;
  p_output1[623]=0;
  p_output1[624]=0;
  p_output1[625]=0;
  p_output1[626]=0;
  p_output1[627]=0;
  p_output1[628]=0;
  p_output1[629]=0;
  p_output1[630]=0;
  p_output1[631]=0;
  p_output1[632]=0;
  p_output1[633]=0;
  p_output1[634]=0;
  p_output1[635]=0;
  p_output1[636]=0;
  p_output1[637]=0;
  p_output1[638]=0;
  p_output1[639]=0;
  p_output1[640]=0;
  p_output1[641]=0;
  p_output1[642]=0;
  p_output1[643]=0;
  p_output1[644]=0;
  p_output1[645]=0;
  p_output1[646]=0;
  p_output1[647]=0;
  p_output1[648]=0;
  p_output1[649]=0;
  p_output1[650]=0;
  p_output1[651]=0;
  p_output1[652]=0;
  p_output1[653]=0;
  p_output1[654]=0;
  p_output1[655]=0;
  p_output1[656]=0;
  p_output1[657]=0;
  p_output1[658]=0;
  p_output1[659]=0;
  p_output1[660]=0;
  p_output1[661]=0;
  p_output1[662]=0;
  p_output1[663]=0;
  p_output1[664]=0;
  p_output1[665]=0;
  p_output1[666]=0;
  p_output1[667]=0;
  p_output1[668]=0;
  p_output1[669]=0;
  p_output1[670]=0;
  p_output1[671]=0;
  p_output1[672]=0;
  p_output1[673]=0;
  p_output1[674]=0;
  p_output1[675]=0;
  p_output1[676]=0;
  p_output1[677]=0;
  p_output1[678]=0;
  p_output1[679]=0;
  p_output1[680]=0;
  p_output1[681]=0;
  p_output1[682]=0;
  p_output1[683]=0;
  p_output1[684]=0;
  p_output1[685]=0;
  p_output1[686]=0;
  p_output1[687]=0;
  p_output1[688]=0;
  p_output1[689]=0;
  p_output1[690]=0;
  p_output1[691]=0;
  p_output1[692]=0;
  p_output1[693]=0;
  p_output1[694]=0;
  p_output1[695]=0;
  p_output1[696]=0;
  p_output1[697]=0;
  p_output1[698]=0;
  p_output1[699]=0;
  p_output1[700]=0;
  p_output1[701]=0;
  p_output1[702]=0;
  p_output1[703]=0;
  p_output1[704]=0;
  p_output1[705]=0;
  p_output1[706]=0;
  p_output1[707]=0;
  p_output1[708]=0;
  p_output1[709]=0;
  p_output1[710]=0;
  p_output1[711]=0;
  p_output1[712]=0;
  p_output1[713]=0;
  p_output1[714]=0;
  p_output1[715]=0;
  p_output1[716]=0;
  p_output1[717]=0;
  p_output1[718]=0;
  p_output1[719]=0;
  p_output1[720]=0;
  p_output1[721]=0;
  p_output1[722]=0;
  p_output1[723]=0;
  p_output1[724]=0;
  p_output1[725]=0;
  p_output1[726]=0;
  p_output1[727]=0;
  p_output1[728]=0;
  p_output1[729]=0;
  p_output1[730]=0;
  p_output1[731]=0;
  p_output1[732]=0;
  p_output1[733]=0;
  p_output1[734]=0;
  p_output1[735]=0;
  p_output1[736]=0;
  p_output1[737]=0;
  p_output1[738]=0;
  p_output1[739]=0;
  p_output1[740]=0;
  p_output1[741]=0;
  p_output1[742]=0;
  p_output1[743]=0;
  p_output1[744]=0;
  p_output1[745]=0;
  p_output1[746]=0;
  p_output1[747]=0;
  p_output1[748]=0;
  p_output1[749]=0;
  p_output1[750]=0;
  p_output1[751]=0;
  p_output1[752]=0;
  p_output1[753]=0;
  p_output1[754]=0;
  p_output1[755]=0;
  p_output1[756]=0;
  p_output1[757]=0;
  p_output1[758]=0;
  p_output1[759]=0;
  p_output1[760]=0;
  p_output1[761]=0;
  p_output1[762]=0;
  p_output1[763]=0;
  p_output1[764]=0;
  p_output1[765]=0;
  p_output1[766]=0;
  p_output1[767]=0;
  p_output1[768]=0;
  p_output1[769]=0;
  p_output1[770]=0;
  p_output1[771]=0;
  p_output1[772]=0;
  p_output1[773]=0;
  p_output1[774]=0;
  p_output1[775]=0;
  p_output1[776]=0;
  p_output1[777]=0;
  p_output1[778]=0;
  p_output1[779]=0;
  p_output1[780]=0;
  p_output1[781]=0;
  p_output1[782]=0;
  p_output1[783]=0;
  p_output1[784]=0;
  p_output1[785]=0;
  p_output1[786]=0;
  p_output1[787]=0;
  p_output1[788]=0;
  p_output1[789]=0;
  p_output1[790]=0;
  p_output1[791]=0;
  p_output1[792]=0;
  p_output1[793]=0;
  p_output1[794]=0;
  p_output1[795]=0;
  p_output1[796]=0;
  p_output1[797]=0;
  p_output1[798]=0;
  p_output1[799]=0;
  p_output1[800]=0;
  p_output1[801]=0;
  p_output1[802]=0;
  p_output1[803]=0;
  p_output1[804]=0;
  p_output1[805]=0;
  p_output1[806]=0;
  p_output1[807]=0;
  p_output1[808]=0;
  p_output1[809]=0;
  p_output1[810]=0;
  p_output1[811]=0;
  p_output1[812]=0;
  p_output1[813]=0;
  p_output1[814]=0;
  p_output1[815]=0;
  p_output1[816]=0;
  p_output1[817]=0;
  p_output1[818]=0;
  p_output1[819]=0;
  p_output1[820]=0;
  p_output1[821]=0;
  p_output1[822]=0;
  p_output1[823]=0;
  p_output1[824]=0;
  p_output1[825]=0;
  p_output1[826]=0;
  p_output1[827]=0;
  p_output1[828]=0;
  p_output1[829]=0;
  p_output1[830]=0;
  p_output1[831]=0;
  p_output1[832]=0;
  p_output1[833]=0;
  p_output1[834]=0;
  p_output1[835]=0;
  p_output1[836]=0;
  p_output1[837]=0;
  p_output1[838]=0;
  p_output1[839]=0;
  p_output1[840]=0;
  p_output1[841]=0;
  p_output1[842]=0;
  p_output1[843]=0;
  p_output1[844]=0;
  p_output1[845]=0;
  p_output1[846]=0;
  p_output1[847]=0;
  p_output1[848]=0;
  p_output1[849]=0;
  p_output1[850]=0;
  p_output1[851]=0;
  p_output1[852]=0;
  p_output1[853]=0;
  p_output1[854]=0;
  p_output1[855]=0;
  p_output1[856]=0;
  p_output1[857]=0;
  p_output1[858]=0;
  p_output1[859]=0;
  p_output1[860]=0;
  p_output1[861]=0;
  p_output1[862]=0;
  p_output1[863]=0;
  p_output1[864]=0;
  p_output1[865]=0;
  p_output1[866]=0;
  p_output1[867]=0;
  p_output1[868]=0;
  p_output1[869]=0;
  p_output1[870]=0;
  p_output1[871]=0;
  p_output1[872]=0;
  p_output1[873]=0;
  p_output1[874]=0;
  p_output1[875]=0;
  p_output1[876]=0;
  p_output1[877]=0;
  p_output1[878]=0;
  p_output1[879]=0;
  p_output1[880]=0;
  p_output1[881]=0;
  p_output1[882]=0;
  p_output1[883]=0;
  p_output1[884]=0;
  p_output1[885]=0;
  p_output1[886]=0;
  p_output1[887]=0;
  p_output1[888]=0;
  p_output1[889]=0;
  p_output1[890]=0;
  p_output1[891]=0;
  p_output1[892]=0;
  p_output1[893]=0;
  p_output1[894]=0;
  p_output1[895]=0;
  p_output1[896]=0;
  p_output1[897]=0;
  p_output1[898]=0;
  p_output1[899]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat10_digit.hh"

namespace SymFunction
{

void Mmat10_digit_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
